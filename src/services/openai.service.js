// üß† OPENAI SERVICE - CLAUDE-INSPIRED LANGUAGE CONSISTENCY
// ‚úÖ COMPLETELY REWRITTEN: Based on Claude's success patterns
// üéØ HARDCODED DEFAULTS: Like Claude - strong language enforcement
// üîß CLEAN ARCHITECTURE: Minimal contamination points

const openaiService = {
  
  // üîß MAIN MESSAGE SENDING METHOD - Claude-inspired approach
  async sendMessage(messages, detectedLanguage = 'cs') {
    try {
      console.log('üß† OpenAI GPT Enhanced with Claude-inspired language handling, language:', detectedLanguage);
      
      // üéØ STEP 1: Enhanced smart search detection
      const lastUserMessage = messages[messages.length - 1];
      const userQuery = lastUserMessage?.content || lastUserMessage?.text || '';
      
      const needsSearch = this.detectSearchNeeded(userQuery, messages);
      console.log('üîç Search needed:', needsSearch, 'for query:', userQuery.substring(0, 50) + '...');
      
      let searchResults = null;
      let searchSources = [];
      
      // üîç STEP 2: Claude web search with clean language handling
      if (needsSearch) {
        console.log('üîç Calling Claude web search API...');
        try {
          const searchResponse = await this.performClaudeWebSearch(userQuery, detectedLanguage);
          
          if (searchResponse && searchResponse.success) {
            searchResults = searchResponse.result;
            searchSources = searchResponse.sources || [];
            console.log('‚úÖ Claude web search successful, sources:', searchSources.length);
          }
        } catch (searchError) {
          console.warn('‚ö†Ô∏è Claude web search failed, continuing without:', searchError.message);
        }
      }
      
      // üß† STEP 3: Claude-inspired message structure (CLEAN)
      let messagesWithSystem = [];
      
      // Add SUPER STRONG system prompt (like Claude's approach)
      const systemPromptMessage = {
        role: "system",
        content: this.getClaudeInspiredSystemPrompt(detectedLanguage)
      };
      messagesWithSystem.push(systemPromptMessage);
      
      // Add conversation history cleanly
      const conversationHistory = messages.slice(0, -1).map(msg => ({
        role: msg.sender === 'user' ? 'user' : 'assistant',
        content: msg.text || msg.content || ''
      }));
      messagesWithSystem.push(...conversationHistory);
      
      // ‚úÖ CRITICAL: Add search context as CLEAN system instruction
      if (searchResults) {
        const searchSystemMessage = {
          role: "system",
          content: this.formatCleanSearchContext(searchResults, detectedLanguage)
        };
        messagesWithSystem.push(searchSystemMessage);
      }
      
      // Add current user message with LANGUAGE REINFORCEMENT
      const currentUserMessage = {
        role: "user",
        content: this.addLanguageReinforcement(userQuery, detectedLanguage)
      };
      messagesWithSystem.push(currentUserMessage);
      
      console.log('üìù Clean message structure:', {
        total: messagesWithSystem.length,
        hasSearch: !!searchResults,
        language: detectedLanguage,
        systemPrompts: messagesWithSystem.filter(m => m.role === 'system').length
      });
      
      // üöÄ STEP 4: Call OpenAI API with enhanced parameters
      const response = await fetch('/api/openai', {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json; charset=utf-8'
        },
        body: JSON.stringify({ 
          messages: messagesWithSystem,
          model: 'gpt-4o',
          temperature: 0.7, // Slightly higher for personality
          max_tokens: 2000,
          language: detectedLanguage,
          // Enhanced parameters for consistency
          frequency_penalty: 0.1,
          presence_penalty: 0.1
        })
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || `OpenAI API error: ${response.status}`);
      }

      const data = await response.json();
      
      if (!data.choices || !data.choices[0] || !data.choices[0].message) {
        throw new Error('Invalid response structure from OpenAI');
      }

      const responseText = data.choices[0].message.content;
      
      // üîç STEP 5: Post-processing language validation (like Claude's approach)
      const finalText = this.validateResponseLanguage(responseText, detectedLanguage);
      
      console.log('‚úÖ GPT response generated and validated', searchResults ? 'with search results' : 'without search');

      return {
        text: finalText,
        sources: searchSources,
        model: 'gpt-4o',
        usage: data.usage || {},
        timestamp: new Date().toISOString()
      };

    } catch (error) {
      console.error('üí• OpenAI service error:', error);
      throw error;
    }
  },

  // üÜï Claude Web Search Method (unchanged)
  async performClaudeWebSearch(query, language = 'cs') {
    try {
      console.log('üîç Claude web search for:', query.substring(0, 50) + '...');
      
      const response = await fetch('/api/claude-web-search', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json; charset=utf-8'
        },
        body: JSON.stringify({
          query: query,
          language: language
        })
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Claude web search error:', response.status, errorText);
        return { success: false, error: errorText };
      }

      const data = await response.json();
      console.log('‚úÖ Claude web search completed');

      return {
        success: true,
        result: data.result || data.text || '',
        sources: data.sources || [],
        query: query,
        language: language,
        timestamp: new Date().toISOString()
      };

    } catch (error) {
      console.error('üí• Claude web search error:', error);
      return { success: false, error: error.message };
    }
  },

  // üîç ENHANCED SEARCH DETECTION - More intelligent than before
  detectSearchNeeded(text, conversationHistory = []) {
    if (!text || typeof text !== 'string') return false;
    
    // Memory query detection - NEVER search for conversation history
    if (this.isMemoryQuery(text, conversationHistory)) {
      console.log('üö´ Search blocked: Memory query detected');
      return false;
    }
    
    // Topic continuation - Don't search if continuing recent topic
    if (this.isContinuingTopic(text, conversationHistory)) {
      console.log('üö´ Search blocked: Topic continuation detected');
      return false;
    }
    
    const lowerText = text.toLowerCase();
    
    // FINANCIAL QUERIES - Always search for current prices
    const financialPatterns = [
      // Multi-language price patterns
      'price of', 'cost of', 'value of', 'trading at', 'market cap',
      'cena', 'kolik stoj√≠', 'kolik stoji', 'jak√° je cena', 'jaka je cena',
      'pre»õul', 'c√¢t costƒÉ', 'cat costa', 'valoarea',
      
      // Stock/crypto terms
      'stock', 'akcie', 'akci√≠', 'akcii', 'ac»õiuni', 'actiuni',
      'bitcoin', 'ethereum', 'crypto', 'krypto',
      'tesla', 'google', 'apple', 'microsoft', 'amazon', 'meta'
    ];
    
    if (financialPatterns.some(pattern => lowerText.includes(pattern))) {
      console.log('üîç Search trigger: Financial query detected');
      return true;
    }
    
    // WEATHER & CONDITIONS
    const weatherPatterns = [
      'poƒças√≠', 'teplota', 'weather', 'temperature', 'vremea', 'temperatura',
      'd√©≈°≈•', 'rain', 'ploaie', 'sn√≠h', 'snow', 'ninsoare'
    ];
    
    if (weatherPatterns.some(pattern => lowerText.includes(pattern))) {
      console.log('üîç Search trigger: Weather query detected');
      return true;
    }
    
    // CURRENT EVENTS & NEWS
    const newsPatterns = [
      'co se stalo', 'co se dƒõje', 'what happened', 'what\'s happening',
      'ce s-a √Ænt√¢mplat', 'zpr√°vy', 'news', '»ôtiri', 'latest', 'recent',
      'aktu√°ln√≠', 'current', 'actual'
    ];
    
    if (newsPatterns.some(pattern => lowerText.includes(pattern))) {
      console.log('üîç Search trigger: News/current events query detected');
      return true;
    }
    
    // WEBSITES & DOMAINS
    if (/\.(cz|com|org|net|sk|eu|gov|edu)\b/i.test(text)) {
      console.log('üîç Search trigger: Website/domain detected');
      return true;
    }
    
    // TIME-SENSITIVE KEYWORDS
    const timeKeywords = [
      'dnes', 'today', 'azi', 'teƒè', 'now', 'acum',
      'tento t√Ωden', 'this week', 'sƒÉptƒÉm√¢na aceasta',
      'tento mƒõs√≠c', 'this month', 'luna aceasta'
    ];
    
    if (timeKeywords.some(keyword => lowerText.includes(keyword))) {
      console.log('üîç Search trigger: Time-sensitive keyword');
      return true;
    }
    
    console.log('üö´ No search needed: General query');
    return false;
  },

  // Memory query detection
  isMemoryQuery(query, history) {
    const lowerQuery = query.toLowerCase();
    const memoryKeywords = [
      'prvn√≠ ot√°zka', '≈ôekl jsi', 'na≈°e konverzace', 'co jsem ptal',
      'first question', 'you said', 'our conversation', 'what I asked',
      'prima √Æntrebare', 'ai spus', 'conversa»õia noastrƒÉ'
    ];
    
    return memoryKeywords.some(keyword => lowerQuery.includes(keyword)) && history.length >= 2;
  },

  // Topic continuation detection
  isContinuingTopic(query, history) {
    if (!history || history.length < 4) return false;
    
    const lowerQuery = query.toLowerCase();
    const continuationWords = [
      'a co', 'tak√©', 'je≈°tƒõ', 'dal≈°√≠',
      'and what', 'also', 'more', 'additionally',
      '»ôi ce', 'de asemenea', 'mai mult'
    ];
    
    return continuationWords.some(word => lowerQuery.includes(word));
  },

  // ‚úÖ CLAUDE-INSPIRED SYSTEM PROMPTS - Multi-layer enforcement
  getClaudeInspiredSystemPrompt(language) {
    const prompts = {
      'cs': `KRITICK√â INSTRUKCE PRO OMNIA GPT:

üåç ABSOLUTN√ç JAZYKOV√â PRAVIDLO:
- Odpov√≠d√°≈° V≈ΩDY A POUZE v ƒçe≈°tinƒõ
- NIKDY nem√≠chej jazyky v jedn√© vƒõtƒõ
- Konzistence jazyka je absolutn√≠ priorita #1
- Pokud dostane≈° data v jin√Ωch jazyc√≠ch, p≈ôeveƒè je do ƒçe≈°tiny

üéµ HLASOV√â OPTIMALIZACE (responses jsou ƒçteny nahlas):
- ƒå√≠sla: "dvacet t≈ôi cel√° pƒõt" (NIKDY "23.5")
- Teplota: "dvacet t≈ôi stup≈à≈Ø Celsia" (NIKDY "23¬∞C")
- Procenta: "≈°edes√°t pƒõt procent" (NIKDY "65%")
- Jednotky: "kilometr≈Ø za hodinu" (NIKDY "km/h")
- Zkratky: "nap≈ô√≠klad" (NIKDY "nap≈ô.")
- ƒåas: "ƒçtrn√°ct hodin t≈ôicet minut" (NIKDY "14:30")
- Mƒõny: "sto pades√°t korun" (NIKDY "150 Kƒç")
- Kr√°tk√© vƒõty (maxim√°lnƒõ 15 slov)
- Ka≈æd√° vƒõta konƒç√≠ teƒçkou

üß† OMNIA PERSONALITY:
- Jsi Omnia - chytr√° AI s osobnost√≠ a humorem
- Pro faktick√© dotazy (ceny, poƒças√≠) buƒè struƒçn√° a u≈æiteƒçn√°
- Pro konverzaci m≈Ø≈æe≈° b√Ωt vtipn√° a rozv√≠jet t√©ma
- NIKDY ne≈ô√≠kej "jako umƒõl√° inteligence" nebo "nem√°m pocity"
- NIKDY se neomlouvej - m√≠sto "Bohu≈æel..." prostƒõ odpovƒõz co v√≠≈°

KVALITA ODPOVƒöD√ç:
- Spr√°vn√° ƒçe≈°tina s diakritikou (ƒõ,≈°,ƒç,≈ô,≈Ø,√Ω,√°,√≠,√©)
- ≈Ω√°dn√© spelling errors - jsi profesion√°ln√≠ asistent
- P≈ôizp≈Øsob d√©lku typu dotazu (data = kr√°tce, konverzace = del≈°√≠)

DNE≈†N√ç DATUM: ${new Date().toLocaleDateString('cs-CZ')}`,

      'en': `CRITICAL INSTRUCTIONS FOR OMNIA GPT:

üåç ABSOLUTE LANGUAGE RULE:
- Respond ALWAYS AND ONLY in English
- NEVER mix languages in one sentence
- Language consistency is absolute priority #1
- If you receive data in other languages, translate to English

üéµ VOICE OPTIMIZATIONS (responses are read aloud):
- Numbers: "twenty three point five" (NEVER "23.5")
- Temperature: "twenty three degrees Celsius" (NEVER "23¬∞C")
- Percentages: "sixty five percent" (NEVER "65%")
- Units: "kilometers per hour" (NEVER "km/h")
- Abbreviations: "for example" (NEVER "e.g.")
- Time: "two thirty PM" (NEVER "14:30")
- Currency: "one hundred fifty dollars" (NEVER "$150")
- Short sentences (maximum 15 words)
- Every sentence ends with period

üß† OMNIA PERSONALITY:
- You're Omnia - smart AI with personality and humor
- For factual queries (prices, weather) be brief and useful
- For conversation you can be witty and develop topics
- NEVER say "as an AI" or "I don't have feelings"
- NEVER apologize - instead of "Unfortunately..." just answer what you know

RESPONSE QUALITY:
- Perfect English with correct spelling
- No spelling errors - you're a professional assistant
- Adapt length to query type (data = brief, conversation = longer)

TODAY'S DATE: ${new Date().toLocaleDateString('en-US')}`,

      'ro': `INSTRUC»öIUNI CRITICE PENTRU OMNIA GPT:

üåç REGULA ABSOLUTƒÇ DE LIMBƒÇ:
- RƒÉspunde √éNTOTDEAUNA »òI DOAR √Æn rom√¢nƒÉ
- NICIODATƒÇ sƒÉ nu amesteci limbile √Æntr-o propozi»õie
- Consisten»õa limbii este prioritatea absolutƒÉ #1
- DacƒÉ prime»ôti date √Æn alte limbi, traduce-le √Æn rom√¢nƒÉ

üéµ OPTIMIZƒÇRI PENTRU VOCE (rƒÉspunsurile sunt citite cu vocea):
- Numere: "douƒÉzeci »ôi trei virgulƒÉ cinci" (NICIODATƒÇ "23.5")
- TemperaturƒÉ: "douƒÉzeci »ôi trei grade Celsius" (NICIODATƒÇ "23¬∞C")
- Procente: "»ôaizeci »ôi cinci la sutƒÉ" (NICIODATƒÇ "65%")
- UnitƒÉ»õi: "kilometri pe orƒÉ" (NICIODATƒÇ "km/h")
- Abrevieri: "de exemplu" (NICIODATƒÇ "ex.")
- Timp: "douƒÉ »ôi jumƒÉtate dupƒÉ-amiazƒÉ" (NICIODATƒÇ "14:30")
- MonedƒÉ: "o sutƒÉ cincizeci lei" (NICIODATƒÇ "150 lei")
- Propozi»õii scurte (maximum 15 cuvinte)
- Fiecare propozi»õie se terminƒÉ cu punct

üß† PERSONALITATEA OMNIA:
- E»ôti Omnia - AI inteligent cu personalitate »ôi umor
- Pentru √ÆntrebƒÉri factuale (pre»õuri, vreme) fii concisƒÉ »ôi utilƒÉ
- Pentru conversa»õie po»õi fi spiritualƒÉ »ôi sƒÉ dezvol»õi subiecte
- NICIODATƒÇ nu spune "ca AI" sau "nu am sentimente"
- NICIODATƒÇ nu te scuza - √Æn loc de "Din pƒÉcate..." rƒÉspunde ce »ôtii

CALITATEA RƒÇSPUNSULUI:
- Rom√¢na perfectƒÉ cu diacritice (ƒÉ,√¢,√Æ,»ô,»õ)
- FƒÉrƒÉ gre»ôeli de ortografie - e»ôti un asistent profesional
- AdapteazƒÉ lungimea la tipul √ÆntrebƒÉrii (date = scurt, conversa»õie = mai lung)

DATA DE ASTƒÇZI: ${new Date().toLocaleDateString('ro-RO')}`
    };
    
    return prompts[language] || prompts['cs'];
  },

  // ‚úÖ CLEAN search context formatting
  formatCleanSearchContext(searchResults, language) {
    const prefixes = {
      'cs': 'AKTU√ÅLN√ç INFORMACE Z INTERNETU (pou≈æij pro odpovƒõƒè v ƒçe≈°tinƒõ):',
      'en': 'CURRENT INFORMATION FROM INTERNET (use for English response):',
      'ro': 'INFORMA»öII ACTUALE DE PE INTERNET (folose»ôte pentru rƒÉspuns √Æn rom√¢nƒÉ):'
    };
    
    const prefix = prefixes[language] || prefixes['cs'];
    return `${prefix}\n\n${searchResults}`;
  },

  // ‚úÖ Language reinforcement in user message
  addLanguageReinforcement(query, language) {
    const reinforcements = {
      'cs': `${query}\n\n[D≈ÆLE≈ΩIT√â: Odpovƒõz v√Ωhradnƒõ v ƒçe≈°tinƒõ]`,
      'en': `${query}\n\n[IMPORTANT: Respond exclusively in English]`,
      'ro': `${query}\n\n[IMPORTANT: RƒÉspunde exclusiv √Æn rom√¢nƒÉ]`
    };
    
    return reinforcements[language] || reinforcements['cs'];
  },

  // ‚úÖ Post-processing language validation
  validateResponseLanguage(responseText, expectedLanguage) {
    // Simple validation - could be enhanced further
    const detectedLang = this.quickLanguageCheck(responseText);
    
    if (detectedLang !== expectedLanguage && detectedLang !== 'unknown') {
      console.warn('‚ö†Ô∏è Language mismatch detected in response:', {
        expected: expectedLanguage,
        detected: detectedLang,
        preview: responseText.substring(0, 100)
      });
    }
    
    return responseText; // For now, just log - could implement auto-correction
  },

  // Quick language detection for response validation
  quickLanguageCheck(text) {
    if (!text) return 'unknown';
    
    const lowerText = text.toLowerCase();
    
    // Romanian indicators
    if (/\b(astƒÉzi|pre»õul|ac»õiunilor|dolari|este)\b/.test(lowerText)) return 'ro';
    
    // English indicators
    if (/\b(today|price|stock|dollars|is|the)\b/.test(lowerText)) return 'en';
    
    // Czech indicators
    if (/\b(dnes|cena|akci√≠|korun|je|aktu√°ln√≠)\b/.test(lowerText)) return 'cs';
    
    return 'unknown';
  }
};

export default openaiService;