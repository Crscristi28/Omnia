// üåç ADVANCED MULTILINGUAL DETECTION SYSTEM
// üéØ Supports 6 languages: CS, EN, RO, DE, RU, PL
// üìä Multi-strategy detection: patterns, words, statistics
// ‚úÖ International-first approach with smart fallbacks

const detectLanguage = (text) => {
  if (!text || typeof text !== 'string') return 'en';

  const originalText = text.trim();
  const lowerText = originalText.toLowerCase();

  // üöÄ STRATEGY 1: CHARACTER PATTERN DETECTION (highest confidence)
  if (/[√°ƒçƒè√©ƒõ√≠≈à√≥≈ô≈°≈•√∫≈Ø√Ω≈æ]/i.test(originalText)) return 'cs'; // Czech diacritics
  if (/[ƒÉ√¢√Æ»ô»õƒÇ√Ç√é»ò»ö]/i.test(originalText)) return 'ro'; // Romanian diacritics
  if (/[√§√∂√º√ü√Ñ√ñ√ú]/i.test(originalText)) return 'de'; // German umlauts
  if (/[–∞-—è—ë]/i.test(originalText)) return 'ru'; // Cyrillic alphabet
  if (/[ƒÖƒáƒô≈Ç≈Ñ√≥≈õ≈∫≈ºƒÑƒÜƒò≈Å≈É√ì≈ö≈π≈ª]/i.test(originalText)) return 'pl'; // Polish diacritics

  // üéØ STRATEGY 2: EXPLICIT LANGUAGE REQUESTS
  const languageRequests = {
    'cs': ['mluv ƒçesky', 'mluvte ƒçesky', '≈ôekni mi ƒçesky', 'odpovƒõz ƒçesky', 'chci ƒçesky', 'p≈ôepni na ƒçe≈°tinu'],
    'en': ['speak english', 'talk english', 'answer in english', 'switch to english', 'i want english', 'respond in english'],
    'ro': ['vorbe»ôte rom√¢nƒÉ', 'rƒÉspunde √Æn rom√¢nƒÉ', 'vreau rom√¢nƒÉ', 'schimbƒÉ la rom√¢nƒÉ', 'limba rom√¢nƒÉ'],
    'de': ['sprich deutsch', 'auf deutsch', 'deutsche antwort', 'wechsel zu deutsch', 'ich will deutsch'],
    'ru': ['–≥–æ–≤–æ—Ä–∏ –ø–æ-—Ä—É—Å—Å–∫–∏', '–æ—Ç–≤–µ—á–∞–π –ø–æ-—Ä—É—Å—Å–∫–∏', '—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫', '–ø–µ—Ä–µ–∫–ª—é—á–∏—Å—å –Ω–∞ —Ä—É—Å—Å–∫–∏–π'],
    'pl': ['m√≥w po polsku', 'odpowiadaj po polsku', 'jƒôzyk polski', 'prze≈ÇƒÖcz na polski']
  };

  for (const [lang, phrases] of Object.entries(languageRequests)) {
    if (phrases.some(phrase => lowerText.includes(phrase))) return lang;
  }

  // üîç STRATEGY 3: SMART SHORT TEXT DETECTION
  if (lowerText.length < 20) {
    return detectShortText(lowerText);
  }

  // üìä STRATEGY 4: STATISTICAL WORD ANALYSIS (for longer texts)
  return detectLongText(lowerText);
};

// üîç SHORT TEXT DETECTION (< 20 characters)
const detectShortText = (lowerText) => {
  const shortPhrases = {
    'en': ['hello', 'hi', 'hey', 'yes', 'no', 'thanks', 'thank you', 'please', 'sorry', 'excuse me',
           'tell', 'me', 'you', 'about', 'what', 'how', 'why', 'when', 'where', 'who', 'which',
           'can', 'could', 'would', 'should', 'will', 'want', 'need', 'help', 'more', 'some', 'any',
           'the', 'and', 'this', 'that', 'with', 'for', 'are', 'was', 'but', 'not', 'have', 'from'],

    'cs': ['ahoj', 'ƒçau', 'dobr√Ω den', 'dƒõkuji', 'd√≠ky', 'pros√≠m', 'promi≈à', 'omluva', 'ano', 'ne',
           '≈ôekni', 'mi', 'ty', 'co', 'jak', 'proƒç', 'kdy', 'kde', 'kdo', 'kter√Ω', 'm≈Ø≈æe≈°', 'chtƒõl',
           'pot≈ôebuji', 'pomoc', 'v√≠ce', 'nƒõco', 'nƒõjak√Ω', 'dekuji', 'prosim', 'rekni', 'muzes',
           'potrebuji', 'vic', 'neco', 'nejaky', 'umis', 'delat', 'jsem', 'jsi', 'je', 'jsme', 'jste',
           'jsou', 'mas', 'mam', 'mate', 'maji', 'inteligence', 'cena', 'akcie', 'kolik', 'stoji'],

    'de': ['hallo', 'guten tag', 'danke', 'bitte', 'entschuldigung', 'ja', 'nein', 'wie', 'was',
           'wo', 'wann', 'warum', 'wer', 'welche', 'k√∂nnen', 'm√∂chte', 'brauche', 'hilfe', 'mehr',
           'der', 'die', 'das', 'und', 'ich', 'du', 'er', 'sie', 'es', 'wir', 'ihr', 'mit', 'von',
           'zu', 'auf', 'f√ºr', 'bei', 'nach', '√ºber', 'durch', 'ohne', 'gegen', 'unter'],

    'ro': ['salut', 'bunƒÉ', 'mul»õumesc', 'te rog', 'scuze', 'da', 'nu', 'cum', 'ce', 'unde',
           'c√¢nd', 'de ce', 'cine', 'care', 'po»õi', 'vreau', 'am nevoie', 'ajutor', 'mai mult',
           'multumesc', 'poti', 'cand', 'esti', 'sunt', 'faci', 'sti', 'la', 'cu', 'pe', 'pentru',
           'din', 'si', 'sa', 'de', 'ma', 'te', 'se', 'ne', 'va', 'le'],

    'ru': ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ', '—Å–ø–∞—Å–∏–±–æ', '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞', '–∏–∑–≤–∏–Ω–∏—Ç–µ', '–¥–∞', '–Ω–µ—Ç', '–∫–∞–∫',
           '—á—Ç–æ', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '–ø–æ—á–µ–º—É', '–∫—Ç–æ', '–∫–∞–∫–æ–π', '–º–æ–∂–µ—à—å', '—Ö–æ—á—É', '–Ω—É–∂–Ω–æ', '–ø–æ–º–æ—â—å',
           '–∏', '–≤', '–Ω–µ', '–Ω–∞', '—è', '–±—ã—Ç—å', '–æ–Ω', '—Å', '–∞', '—Ç–æ', '–≤—Å–µ', '–æ–Ω–∞', '—Ç–∞–∫', '–µ–≥–æ',
           '–Ω–æ', '—Ç—ã', '–∫', '—É', '–∂–µ', '–≤—ã', '–∑–∞', '–±—ã', '–ø–æ', '—Ç–æ–ª—å–∫–æ', '–µ–µ', '–º–Ω–µ', '–±—ã–ª–æ'],

    'pl': ['cze≈õƒá', 'dzie≈Ñ dobry', 'dziƒôkujƒô', 'proszƒô', 'przepraszam', 'tak', 'nie', 'jak',
           'co', 'gdzie', 'kiedy', 'dlaczego', 'kto', 'kt√≥ry', 'mo≈ºesz', 'chcƒô', 'potrzebujƒô', 'pomoc',
           'w', 'na', 'i', 'z', '≈ºe', 'do', 'siƒô', 'o', 'a', 'za', 'od', 'po', 'przy', 'dla',
           'przez', 'ze', 'miƒôdzy', 'przed', 'nad', 'pod', 'bez', 'wraz', 'jako', 'aby', '≈ºeby']
  };

  // Score each language based on word matches with weighted scoring
  const scores = {};
  for (const [lang, words] of Object.entries(shortPhrases)) {
    let score = 0;
    for (const word of words) {
      if (lowerText.includes(word)) {
        // Give higher weight to exact matches and longer words
        const weight = word.length >= 4 ? 2 : 1;
        const isExactMatch = lowerText === word || lowerText.split(' ').includes(word);
        score += isExactMatch ? weight * 2 : weight;
      }
    }
    scores[lang] = score;
  }

  // Return language with highest score, or English as default
  const maxScore = Math.max(...Object.values(scores));
  if (maxScore > 0) {
    const topLangs = Object.keys(scores).filter(lang => scores[lang] === maxScore);
    // If there's a tie, prefer English, then Czech for backwards compatibility
    if (topLangs.includes('en')) return 'en';
    if (topLangs.includes('cs')) return 'cs';
    return topLangs[0];
  }

  return 'en'; // Default for unclear short text
};

// üìä LONG TEXT STATISTICAL ANALYSIS (‚â• 20 characters)
const detectLongText = (lowerText) => {
  // Common words and patterns for statistical analysis
  const languagePatterns = {
    'en': {
      words: ['the', 'and', 'you', 'that', 'was', 'for', 'are', 'with', 'his', 'they', 'this', 'have', 'from', 'one', 'had', 'word', 'but', 'not', 'what', 'all', 'were', 'can', 'said', 'each', 'which', 'their', 'time', 'will', 'about', 'if', 'up', 'out', 'many', 'then', 'them', 'these', 'so', 'some', 'her', 'would', 'make', 'like', 'into', 'him', 'has', 'two', 'more', 'very', 'after', 'words', 'long', 'than', 'first', 'been', 'call', 'who', 'its', 'now', 'find', 'may', 'down', 'side', 'did', 'get', 'come', 'made', 'might', 'way'],
      patterns: /\b(is|are|was|were|the|and|you|that|for|with|his|they|this|have|from|but|not|what|all|can|said|each|which|their|time|will|about)\b/g
    },

    'cs': {
      words: ['je', 'se', 'na', 'za', 'do', 'od', 'po', 'p≈ôi', 'bez', 'p≈ôed', 'mezi', 'p≈ôes', 'kter√Ω', 'kter√°', 'kter√©', 'jeho', 'jej√≠', 'jejich', 'tak√©', 'nebo', 'aby', 'kdy≈æ', 'pokud', 'jako', 'tak', 'ani', 'jak', 'co', 'kde', 'kam', 'kdy', 'proƒç', 'kdo', 'tom', 't√≠m', 't√©to', 'tohoto', 't√©to', 'v≈°echno', 'nƒõco', 'nƒõjak√Ω', 'nƒõkdo', 'nƒõkde', 'nƒõkdy', 'nƒõkam', 'tady', 'tam', 'teƒè', 'pak', 'potom', 'u≈æ', 'je≈°tƒõ', 'pouze', 'pr√°vƒõ', 'proto', 'tedy'],
      patterns: /\b(je|se|na|za|do|od|po|p≈ôi|bez|p≈ôed|mezi|p≈ôes|kter√Ω|kter√°|kter√©|jeho|jej√≠|jejich|tak√©|nebo|aby|kdy≈æ|pokud|jako|tak|ani)\b/g
    },

    'de': {
      words: ['der', 'die', 'und', 'in', 'den', 'von', 'zu', 'das', 'mit', 'sich', 'des', 'auf', 'f√ºr', 'ist', 'im', 'dem', 'nicht', 'ein', 'eine', 'als', 'auch', 'es', 'an', 'werden', 'aus', 'er', 'hat', 'dass', 'sie', 'nach', 'wird', 'bei', 'einer', 'um', 'am', 'sind', 'noch', 'wie', 'einem', '√ºber', 'einen', 'so', 'zum', 'war', 'haben', 'nur', 'oder', 'aber', 'vor', 'zur', 'bis', 'mehr', 'durch', 'man', 'sein', 'wurde', 'sei', 'ins'],
      patterns: /\b(der|die|und|in|den|von|zu|das|mit|sich|des|auf|f√ºr|ist|im|dem|nicht|ein|eine|als|auch|es|an|werden|aus|er|hat|dass|sie|nach|wird)\b/g
    },

    'ro': {
      words: ['de', 'la', '√Æn', 'cu', 'pe', 'pentru', 'din', 'ca', 'sƒÉ', 'se', 'un', 'o', '»ôi', 'nu', 'este', 'sunt', 'care', 'ce', 'mai', 'cum', 'c√¢nd', 'unde', 'dacƒÉ', 'apoi', 'dupƒÉ', '√Ænainte', '√Æntre', 'despre', 'cƒÉtre', 'prin', 'p√¢nƒÉ', 'fƒÉrƒÉ', 'asupra', 'dupa', 'inainte', 'intre', 'catre', 'printr', 'pana', 'fara', 'asupra'],
      patterns: /\b(de|la|√Æn|cu|pe|pentru|din|ca|sƒÉ|se|un|o|»ôi|nu|este|sunt|care|ce|mai|cum|c√¢nd|unde|dacƒÉ|apoi|dupƒÉ|√Ænainte|√Æntre|despre|cƒÉtre|prin)\b/g
    },

    'ru': {
      words: ['–≤', '–∏', '–Ω–µ', '–Ω–∞', '—è', '–±—ã—Ç—å', '–æ–Ω', '—Å', '–∫–∞–∫', '–∞', '—Ç–æ', '–≤—Å–µ', '–æ–Ω–∞', '—Ç–∞–∫', '–µ–≥–æ', '–Ω–æ', '–¥–∞', '—Ç—ã', '–∫', '—É', '–∂–µ', '–≤—ã', '–∑–∞', '–±—ã', '–ø–æ', '—Ç–æ–ª—å–∫–æ', '–µ–µ', '–º–Ω–µ', '–±—ã–ª–æ', '–≤–æ—Ç', '–æ—Ç', '–º–µ–Ω—è', '–µ—â–µ', '–Ω–µ—Ç', '–æ', '–∏–∑', '–µ–º—É', '—Ç–µ–ø–µ—Ä—å', '–∫–æ–≥–¥–∞', '–¥–∞–∂–µ', '–Ω—É', '–≤–¥—Ä—É–≥', '–ª–∏', '–µ—Å–ª–∏', '—É–∂–µ', '–∏–ª–∏', '–Ω–∏', '–±—ã—Ç—å', '–±—ã–ª', '–Ω–µ–≥–æ', '–¥–æ', '–≤–∞—Å', '–Ω–∏–±—É–¥—å', '–æ–ø—è—Ç—å', '—É–∂', '–≤–∞–º', '–≤–µ–¥—å', '—Ç–∞–º', '–ø–æ—Ç–æ–º', '—Å–µ–±—è', '–Ω–∏—á–µ–≥–æ', '–µ–π', '–º–æ–∂–µ—Ç', '–æ–Ω–∏', '—Ç—É—Ç', '–≥–¥–µ', '–µ—Å—Ç—å', '–Ω–∞–¥–æ', '–Ω–µ–π', '–¥–ª—è', '–º—ã', '—Ç–µ–±—è', '–∏—Ö', '—á–µ–º', '–±—ã–ª–∞', '—Å–∞–º', '—á—Ç–æ–±', '–±–µ–∑', '–±—É–¥—Ç–æ', '—á–µ–≥–æ', '—Ä–∞–∑', '—Ç–æ–∂–µ', '—Å–µ–±–µ', '–ø–æ–¥', '–±—É–¥–µ—Ç', '–∂', '—Ç–æ–≥–¥–∞', '–∫—Ç–æ', '—ç—Ç–æ—Ç', '—Ç–æ–≥–æ', '–ø–æ—Ç–æ–º—É', '—ç—Ç–æ–≥–æ', '–∫–∞–∫–æ–π', '—Å–æ–≤—Å–µ–º', '–Ω–∏–º', '–∑–¥–µ—Å—å', '—ç—Ç–æ–º', '–æ–¥–∏–Ω', '–ø–æ—á—Ç–∏', '–º–æ–π', '—Ç–µ–º', '—á—Ç–æ–±—ã', '–Ω–µ–µ', '—Å–µ–π—á–∞—Å', '–±—ã–ª–∏', '–∫—É–¥–∞', '–∑–∞—á–µ–º', '–≤—Å–µ—Ö', '–Ω–∏–∫–æ–≥–¥–∞', '–º–æ–∂–Ω–æ', '–ø—Ä–∏', '–Ω–∞–∫–æ–Ω–µ—Ü', '–¥–≤–∞', '–æ–±', '–¥—Ä—É–≥–æ–π', '—Ö–æ—Ç—å', '–ø–æ—Å–ª–µ', '–Ω–∞–¥', '–±–æ–ª—å—à–µ', '—Ç–æ—Ç', '—á–µ—Ä–µ–∑', '—ç—Ç–∏', '–Ω–∞—Å', '–ø—Ä–æ', '–≤—Å–µ–≥–æ', '–Ω–∏—Ö', '–∫–∞–∫–∞—è', '–º–Ω–æ–≥–æ', '—Ä–∞–∑–≤–µ', '—Ç—Ä–∏', '—ç—Ç—É', '–º–æ—è', '–≤–ø—Ä–æ—á–µ–º', '—Ö–æ—Ä–æ—à–æ', '—Å–≤–æ—é', '—ç—Ç–æ–π', '–ø–µ—Ä–µ–¥', '–∏–Ω–æ–≥–¥–∞', '–ª—É—á—à–µ', '—á—É—Ç—å', '—Ç–æ–º', '–Ω–µ–ª—å–∑—è', '—Ç–∞–∫–æ–π', '–∏–º', '–±–æ–ª–µ–µ', '–≤—Å–µ–≥–¥–∞', '–∫–æ–Ω–µ—á–Ω–æ', '–≤—Å—é', '–º–µ–∂–¥—É'],
      patterns: /\b(–≤|–∏|–Ω–µ|–Ω–∞|—è|–±—ã—Ç—å|–æ–Ω|—Å|–∫–∞–∫|–∞|—Ç–æ|–≤—Å–µ|–æ–Ω–∞|—Ç–∞–∫|–µ–≥–æ|–Ω–æ|–¥–∞|—Ç—ã|–∫|—É|–∂–µ|–≤—ã|–∑–∞|–±—ã|–ø–æ|—Ç–æ–ª—å–∫–æ|–µ–µ|–º–Ω–µ|–±—ã–ª–æ|–≤–æ—Ç|–æ—Ç|–º–µ–Ω—è|–µ—â–µ|–Ω–µ—Ç|–æ|–∏–∑)\b/g
    },

    'pl': {
      words: ['w', 'na', 'i', 'z', '≈ºe', 'do', 'siƒô', 'o', 'a', 'za', 'od', 'po', 'przy', 'dla', 'przez', 'ze', 'miƒôdzy', 'przed', 'nad', 'pod', 'bez', 'wobec', 'wraz', 'w≈õr√≥d', 'jako', 'aby', '≈ºeby', 'gdyby', 'je≈õli', 'gdy', 'kiedy', 'gdzie', 'jak', 'co', 'kto', 'kt√≥ry', 'jaki', 'ile', 'czy', 'nie', 'tak', 'bardzo', 'ju≈º', 'jeszcze', 'tylko', 'tak≈ºe', 'r√≥wnie≈º', 'nawet', 'w≈Ça≈õnie', 'mo≈ºe', 'chyba', 'pewnie', 'oczywi≈õcie', 'naturalnie', 'podobnie', 'inaczej', 'jednak', 'ale', 'lecz', 'oraz', 'ani', 'albo', 'lub', 'bƒÖd≈∫', 'czyli', 'to', 'te', 'ta', 'ten', 'tego', 'tej', 'tym', 'tych', 'm√≥j', 'moja', 'moje', 'nasz', 'nasza', 'nasze', 'jego', 'jej', 'ich'],
      patterns: /\b(w|na|i|z|≈ºe|do|siƒô|o|a|za|od|po|przy|dla|przez|ze|miƒôdzy|przed|nad|pod|bez|wobec|wraz|w≈õr√≥d|jako|aby|≈ºeby|gdyby|je≈õli|gdy|kiedy)\b/g
    }
  };

  // Score each language based on word frequency and patterns
  const scores = {};
  for (const [lang, config] of Object.entries(languagePatterns)) {
    let score = 0;

    // Count common words
    for (const word of config.words) {
      const regex = new RegExp(`\\b${word}\\b`, 'g');
      const matches = lowerText.match(regex);
      if (matches) score += matches.length;
    }

    // Count pattern matches
    const patternMatches = lowerText.match(config.patterns);
    if (patternMatches) score += patternMatches.length * 2; // Patterns have higher weight

    scores[lang] = score;
  }

  // Return language with highest score, with English as default
  const maxScore = Math.max(...Object.values(scores));
  if (maxScore > 0) {
    return Object.keys(scores).find(lang => scores[lang] === maxScore);
  }

  return 'en'; // Default for unclear text
};

// ‚úÖ COMPREHENSIVE TEST CASES FOR ALL 6 LANGUAGES
const testCases = [
  // ‚úÖ ENGLISH TESTS
  { input: "hello", expected: 'en', description: "English greeting" },
  { input: "hey", expected: 'en', description: "English informal greeting" },
  { input: "tell me about you", expected: 'en', description: "CRITICAL FIX: English conversation starter" },
  { input: "what's the price of Tesla stock", expected: 'en', description: "English financial query" },
  { input: "hello how are you doing today", expected: 'en', description: "Clear English conversation" },
  { input: "can you help me with this", expected: 'en', description: "English help request" },
  { input: "what are you doing", expected: 'en', description: "English question" },
  { input: "how are you", expected: 'en', description: "English common phrase" },
  { input: "thank you very much", expected: 'en', description: "English politeness" },

  // ‚úÖ CZECH TESTS
  { input: "ahoj", expected: 'cs', description: "Czech greeting" },
  { input: "inteligence", expected: 'cs', description: "CRITICAL FIX: inteligence should be Czech" },
  { input: "jaka je cena akcie tesla", expected: 'cs', description: "CRITICAL FIX: Czech financial query" },
  { input: "co umis delat", expected: 'cs', description: "CRITICAL FIX: Czech capabilities query" },
  { input: "muzes mi rict jak se mas dnes", expected: 'cs', description: "Czech without diacritics" },
  { input: "potrebuju pomoc s aplikaci", expected: 'cs', description: "Czech tech request" },
  { input: "kolik stoji google akcie dnes", expected: 'cs', description: "Czech price query" },
  { input: "dekuji za odpoved", expected: 'cs', description: "Czech politeness" },
  { input: "ahoj jak se mas", expected: 'cs', description: "Czech greeting conversation" },
  { input: "co se deje", expected: 'cs', description: "Czech casual question" },
  { input: "jak to jde", expected: 'cs', description: "Czech small talk" },

  // ‚úÖ ROMANIAN TESTS
  { input: "salut", expected: 'ro', description: "Romanian greeting" },
  { input: "Ce sti sa faci a cine esti tu?", expected: 'ro', description: "Romanian with single 'a'" },
  { input: "cat costa actiunile Tesla", expected: 'ro', description: "Romanian financial query" },
  { input: "cum esti", expected: 'ro', description: "Romanian how are you" },
  { input: "ce faci", expected: 'ro', description: "Romanian what are you doing" },
  { input: "multumesc", expected: 'ro', description: "Romanian thank you" },
  { input: "unde esti", expected: 'ro', description: "Romanian where are you" },
  { input: "ce mai faci", expected: 'ro', description: "Romanian casual question" },

  // ‚úÖ GERMAN TESTS
  { input: "hallo", expected: 'de', description: "German greeting" },
  { input: "wie geht es dir", expected: 'de', description: "German how are you" },
  { input: "was machst du", expected: 'de', description: "German what are you doing" },
  { input: "danke sch√∂n", expected: 'de', description: "German thank you" },
  { input: "guten tag", expected: 'de', description: "German good day" },
  { input: "ich brauche hilfe", expected: 'de', description: "German help request" },
  { input: "wo bist du", expected: 'de', description: "German where are you" },
  { input: "k√∂nnen sie mir helfen", expected: 'de', description: "German polite help request" },

  // ‚úÖ RUSSIAN TESTS
  { input: "–ø—Ä–∏–≤–µ—Ç", expected: 'ru', description: "Russian greeting" },
  { input: "–∫–∞–∫ –¥–µ–ª–∞", expected: 'ru', description: "Russian how are things" },
  { input: "—á—Ç–æ –¥–µ–ª–∞–µ—à—å", expected: 'ru', description: "Russian what are you doing" },
  { input: "—Å–ø–∞—Å–∏–±–æ", expected: 'ru', description: "Russian thank you" },
  { input: "–≥–¥–µ —Ç—ã", expected: 'ru', description: "Russian where are you" },
  { input: "–ø–æ–º–æ–≥–∏ –º–Ω–µ", expected: 'ru', description: "Russian help me" },
  { input: "–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç", expected: 'ru', description: "Russian what's your name" },

  // ‚úÖ POLISH TESTS
  { input: "cze≈õƒá", expected: 'pl', description: "Polish greeting" },
  { input: "jak siƒô masz", expected: 'pl', description: "Polish how are you" },
  { input: "co robisz", expected: 'pl', description: "Polish what are you doing" },
  { input: "dziƒôkujƒô", expected: 'pl', description: "Polish thank you" },
  { input: "gdzie jeste≈õ", expected: 'pl', description: "Polish where are you" },
  { input: "pom√≥≈º mi", expected: 'pl', description: "Polish help me" },
  { input: "dzie≈Ñ dobry", expected: 'pl', description: "Polish good day" },

  // ‚úÖ EDGE CASES & MIXED CONTENT
  { input: "ok", expected: 'en', description: "Short ambiguous - default English" },
  { input: "yes", expected: 'en', description: "English affirmation" },
  { input: "no", expected: 'en', description: "English negation" },
  { input: "123 test", expected: 'en', description: "Numbers with English" },
  { input: "test", expected: 'en', description: "Single English word" },

  // ‚úÖ DIACRITICS TESTS
  { input: "m≈Ø≈æe≈° mi pomoct", expected: 'cs', description: "Czech with diacritics" },
  { input: "mul»õumesc foarte mult", expected: 'ro', description: "Romanian with diacritics" },
  { input: "gr√∂√üer als normal", expected: 'de', description: "German with umlauts" },
  { input: "wiƒôkszy ni≈º zwykle", expected: 'pl', description: "Polish with diacritics" }
];

// Run tests in development
if (typeof window === 'undefined') {
  console.log('\nüß™ RUNNING ENHANCED LANGUAGE DETECTION TESTS:\n');
  
  let passed = 0;
  let failed = 0;
  
  testCases.forEach((test, idx) => {
    const result = detectLanguage(test.input);
    const status = result === test.expected ? '‚úÖ' : '‚ùå';
    
    console.log(`${status} Test ${idx + 1}: "${test.input}"`);
    console.log(`   Expected: ${test.expected}, Got: ${result}`);
    console.log(`   Description: ${test.description}\n`);
    
    if (result === test.expected) {
      passed++;
    } else {
      failed++;
    }
  });
  
  console.log(`üìä RESULTS: ${passed} passed, ${failed} failed`);
  console.log(`Success rate: ${Math.round((passed / testCases.length) * 100)}%\n`);
}

export default detectLanguage;