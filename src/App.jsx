import React, { useState, useRef, useEffect, useMemo } from 'react';
import './App.css';

// üé® NEW OMNIA LOGO - Nov√Ω modro-fialov√Ω design ze screenshotu
const OmniaLogo = ({ size = 80, animate = false }) => {
  return (
    <div
      className={`omnia-logo ${animate ? 'animate' : ''}`}
      style={{
        width: size,
        height: size,
        borderRadius: '50%',
        background: `
          radial-gradient(circle at 30% 40%, 
            #00ffff 0%,
            #0096ff 30%,
            #6432ff 60%,
            #9932cc 80%,
            #4b0082 100%
          )
        `,
        boxShadow: `
          0 0 ${size * 0.4}px rgba(100, 50, 255, 0.6),
          0 0 ${size * 0.2}px rgba(0, 150, 255, 0.4),
          inset 0 0 ${size * 0.1}px rgba(255, 255, 255, 0.2)
        `,
        position: 'relative',
        overflow: 'hidden',
        cursor: 'pointer',
        transition: 'all 0.3s ease',
        border: '2px solid rgba(255, 255, 255, 0.1)'
      }}
    >
      <div
        style={{
          position: 'absolute',
          top: '20%',
          left: '20%',
          width: '30%',
          height: '30%',
          borderRadius: '50%',
          background: 'rgba(255, 255, 255, 0.3)',
          filter: 'blur(8px)'
        }}
      />
      {animate && (
        <div
          style={{
            position: 'absolute',
            top: '-50%',
            left: '-50%',
            width: '200%',
            height: '200%',
            background: 'linear-gradient(45deg, transparent 30%, rgba(255,255,255,0.2) 50%, transparent 70%)',
            animation: 'shimmer 3s ease-in-out infinite'
          }}
        />
      )}
    </div>
  );
};

const MiniOmniaLogo = ({ size = 28, onClick, isAudioPlaying = false, loading = false, streaming = false }) => {
  const getLogoStyle = () => {
    const baseStyle = {
      width: size,
      height: size,
      borderRadius: '50%',
      background: `
        radial-gradient(circle at 30% 40%, 
          #00ffff 0%,
          #0096ff 30%,
          #6432ff 60%,
          #9932cc 80%,
          #4b0082 100%
        )
      `,
      cursor: 'pointer',
      transition: 'all 0.3s ease',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      position: 'relative',
      border: '1px solid rgba(255, 255, 255, 0.2)'
    };

    if (streaming) {
      return {
        ...baseStyle,
        animation: 'pulse-streaming 1.2s ease-in-out infinite',
        boxShadow: `0 0 ${size * 0.8}px rgba(0, 255, 255, 1)`
      };
    }

    if (loading) {
      return {
        ...baseStyle,
        animation: 'pulse-omnia 1.5s ease-in-out infinite',
        boxShadow: `0 0 ${size * 0.6}px rgba(100, 50, 255, 0.8)`
      };
    }
    
    if (isAudioPlaying) {
      return {
        ...baseStyle,
        animation: 'pulse-audio 1s ease-in-out infinite',
        boxShadow: `0 0 ${size * 0.8}px rgba(0, 255, 255, 0.9)`
      };
    }
    
    return {
      ...baseStyle,
      boxShadow: `0 0 ${size * 0.4}px rgba(100, 50, 255, 0.5)`
    };
  };

  return (
    <div
      style={getLogoStyle()}
      onClick={onClick}
      title={streaming ? "Streaming prob√≠h√°..." : "Klepnƒõte pro Voice Screen"}
    />
  );
};

const ChatOmniaLogo = ({ size = 14 }) => {
  return (
    <div
      style={{
        width: size,
        height: size,
        borderRadius: '50%',
        background: `
          radial-gradient(circle at 30% 40%, 
            #00ffff 0%,
            #0096ff 30%,
            #6432ff 60%,
            #9932cc 80%,
            #4b0082 100%
          )
        `,
        boxShadow: `0 0 ${size * 0.5}px rgba(100, 50, 255, 0.6)`,
        display: 'inline-block',
        marginRight: '6px',
        flexShrink: 0,
        border: '1px solid rgba(255, 255, 255, 0.1)'
      }}
    />
  );
};

const OmniaArrowButton = ({ onClick, disabled, loading, size = 50 }) => {
  const getButtonStyle = () => {
    const baseStyle = {
      width: size,
      height: size,
      borderRadius: '50%',
      border: 'none',
      cursor: disabled ? 'not-allowed' : 'pointer',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      fontSize: size * 0.3,
      fontWeight: 'bold',
      transition: 'all 0.2s ease',
      color: 'white',
      opacity: disabled ? 0.5 : 1
    };

    if (disabled) {
      return {
        ...baseStyle,
        background: 'linear-gradient(135deg, #4a5568, #2d3748)',
        boxShadow: '0 2px 8px rgba(0,0,0,0.2)'
      };
    }

    return {
      ...baseStyle,
      background: `
        radial-gradient(circle at 30% 40%, 
          #00ffff 0%,
          #0096ff 30%,
          #6432ff 60%,
          #9932cc 80%,
          #4b0082 100%
        )
      `,
      boxShadow: '0 4px 12px rgba(100, 50, 255, 0.4)'
    };
  };

  return (
    <button
      onClick={onClick}
      disabled={disabled}
      style={getButtonStyle()}
      onMouseEnter={(e) => {
        if (!disabled) {
          e.target.style.transform = 'translateY(-1px) scale(1.05)';
          e.target.style.boxShadow = '0 6px 16px rgba(100, 50, 255, 0.6)';
        }
      }}
      onMouseLeave={(e) => {
        if (!disabled) {
          e.target.style.transform = 'translateY(0) scale(1)';
          e.target.style.boxShadow = '0 4px 12px rgba(100, 50, 255, 0.4)';
        }
      }}
      title="Odeslat zpr√°vu"
    >
      {loading ? '‚è≥' : '‚Üí'}
    </button>
  );
};

// üéØ ƒåESK√ù TTS PREPROCESSING - ≈òe≈°√≠ probl√©my s v√Ωslovnost√≠
const preprocessCzechTextForTTS = (text) => {
  if (!text || typeof text !== 'string') return '';
  
  let processedText = text;
  
  // 1. P≈ôevod ƒç√≠sel na slova (z√°kladn√≠ ƒç√≠sla)
  const numberMap = {
    '0': 'nula', '1': 'jedna', '2': 'dva', '3': 't≈ôi', '4': 'ƒçty≈ôi',
    '5': 'pƒõt', '6': '≈°est', '7': 'sedm', '8': 'osm', '9': 'devƒõt',
    '10': 'deset', '11': 'jeden√°ct', '12': 'dvan√°ct', '13': 't≈ôin√°ct',
    '14': 'ƒçtrn√°ct', '15': 'patn√°ct', '16': '≈°estn√°ct', '17': 'sedmn√°ct',
    '18': 'osmn√°ct', '19': 'devaten√°ct', '20': 'dvacet'
  };
  
  // Nahradit jednotliv√° ƒç√≠sla slovy kdy≈æ nejsou souƒç√°st√≠ vƒõt≈°√≠ch ƒç√≠sel
  Object.entries(numberMap).forEach(([num, word]) => {
    const regex = new RegExp(`\\b${num}\\b`, 'g');
    processedText = processedText.replace(regex, word);
  });
  
  // 2. Speci√°ln√≠ p≈ô√≠pady pro ceny a mƒõny
  processedText = processedText.replace(/(\d+)\s*Kƒç/gi, '$1 korun ƒçesk√Ωch');
  processedText = processedText.replace(/(\d+)\s*‚Ç¨/gi, '$1 eur');
  processedText = processedText.replace(/(\d+)\s*\$/gi, '$1 dolar≈Ø');
  
  // 3. Procenta
  processedText = processedText.replace(/(\d+)\s*%/gi, '$1 procent');
  
  // 4. Teploty
  processedText = processedText.replace(/(\d+)\s*¬∞C/gi, '$1 stup≈à≈Ø celsia');
  processedText = processedText.replace(/(\d+)\s*¬∞F/gi, '$1 stup≈à≈Ø fahrenheita');
  
  // 5. ƒåasy
  processedText = processedText.replace(/(\d{1,2}):(\d{2})/g, '$1 hodin $2 minut');
  
  // 6. Zkratky a speci√°ln√≠ znaky
  const abbreviations = {
    'atd': 'a tak d√°le',
    'apod': 'a podobnƒõ',
    'tj': 'to jest',
    'tzn': 'to znamen√°',
    'nap≈ô': 'nap≈ô√≠klad',
    'resp': 'respektive',
    'tzv': 'takzvan√Ω',
    'AI': 'ajaj',
    'API': '√° p√© jaj',
    'URL': 'j≈Ø √°r el',
    'HTML': 'h√° t√© em el',
    'CSS': 'c√© es es',
    'JS': 'd≈æej es',
    'TTS': 't√© t√© es'
  };
  
  Object.entries(abbreviations).forEach(([abbr, expansion]) => {
    const regex = new RegExp(`\\b${abbr}\\b`, 'gi');
    processedText = processedText.replace(regex, expansion);
  });
  
  // 7. Vyƒçi≈°tƒõn√≠ interpunkce pro lep≈°√≠ plynulost
  processedText = processedText.replace(/\.\.\./g, ', pauza,');
  processedText = processedText.replace(/--/g, ', pauza,');
  processedText = processedText.replace(/\*/g, '');
  processedText = processedText.replace(/#{1,6}/g, '');
  
  // 8. Oprava dvojit√Ωch mezer
  processedText = processedText.replace(/\s+/g, ' ').trim();
  
  console.log('üéØ TTS Preprocessing:', { original: text.substring(0, 100), processed: processedText.substring(0, 100) });
  
  return processedText;
};

// ‚å®Ô∏è ENHANCED TYPEWRITER EFFECT s real-time streaming podporou
function TypewriterText({ text, isStreaming = false }) {
  const [displayedText, setDisplayedText] = useState('');
  const [charIndex, setCharIndex] = useState(0);
  const chars = useMemo(() => Array.from(text), [text]);

  useEffect(() => {
    // Reset p≈ôi zmƒõnƒõ textu bƒõhem streamingu
    if (text.length < displayedText.length) {
      setDisplayedText('');
      setCharIndex(0);
      return;
    }

    // Pokud je streaming aktivn√≠, zobrazuj text okam≈æitƒõ
    if (isStreaming) {
      setDisplayedText(text);
      setCharIndex(text.length);
      return;
    }

    // Klasick√Ω typewriter efekt pro dokonƒçen√© zpr√°vy
    if (charIndex >= chars.length) return;
    
    const timeout = setTimeout(() => {
      setDisplayedText((prev) => prev + chars[charIndex]);
      setCharIndex((prev) => prev + 1);
    }, 20);
    
    return () => clearTimeout(timeout);
  }, [charIndex, chars, text, isStreaming, displayedText]);

  return (
    <span>
      {displayedText}
      {isStreaming && (
        <span style={{ 
          animation: 'blink 1s infinite',
          color: '#00ffff',
          fontWeight: 'bold'
        }}>
          |
        </span>
      )}
    </span>
  );
}// üîß HELPER FUNKCE PRO CLAUDE MESSAGES
const prepareClaudeMessages = (messages) => {
  try {
    const validMessages = messages.filter(msg => 
      msg.sender === 'user' || msg.sender === 'bot'
    );

    let claudeMessages = validMessages.map(msg => ({
      role: msg.sender === 'user' ? 'user' : 'assistant',
      content: msg.text || ''
    }));

    if (claudeMessages.length > 0 && claudeMessages[0].role === 'assistant') {
      claudeMessages = claudeMessages.slice(1);
    }

    const cleanMessages = [];
    for (let i = 0; i < claudeMessages.length; i++) {
      const current = claudeMessages[i];
      const previous = cleanMessages[cleanMessages.length - 1];
      
      if (!previous || previous.role !== current.role) {
        cleanMessages.push(current);
      }
    }

    if (cleanMessages.length > 0 && cleanMessages[cleanMessages.length - 1].role === 'assistant') {
      cleanMessages.pop();
    }

    return cleanMessages;

  } catch (error) {
    console.error('üí• Error preparing Claude messages:', error);
    const lastUserMessage = messages.filter(msg => msg.sender === 'user').slice(-1);
    return lastUserMessage.map(msg => ({
      role: 'user',
      content: msg.text || ''
    }));
  }
};

// üé§ ENHANCED VOICE RECORDER s lep≈°√≠m error handlingem
const VoiceRecorder = ({ onTranscript, disabled, mode }) => {
  const [isRecording, setIsRecording] = useState(false);
  const [isProcessing, setIsProcessing] = useState(false);
  const mediaRecorderRef = useRef(null);
  const audioChunksRef = useRef([]);
  const streamRef = useRef(null);
  const touchStartTimeRef = useRef(null);
  const isIOSPWA = window.navigator.standalone;

  const startRecording = async () => {
    try {
      console.log('üéôÔ∏è Starting enhanced recording...');
      
      const constraints = {
        audio: {
          sampleRate: isIOSPWA ? 44100 : 16000,
          channelCount: 1,
          echoCancellation: true,
          noiseSuppression: true,
          autoGainControl: true
        }
      };

      const stream = await navigator.mediaDevices.getUserMedia(constraints);
      streamRef.current = stream;

      const mediaRecorder = new MediaRecorder(stream, {
        mimeType: isIOSPWA ? 'audio/mp4' : 'audio/webm;codecs=opus'
      });
      
      mediaRecorderRef.current = mediaRecorder;
      audioChunksRef.current = [];

      mediaRecorder.ondataavailable = (event) => {
        if (event.data.size > 0) {
          audioChunksRef.current.push(event.data);
        }
      };

      mediaRecorder.onstop = async () => {
        console.log('üõë Recording stopped, processing...');
        setIsProcessing(true);
        
        if (streamRef.current) {
          streamRef.current.getTracks().forEach(track => {
            track.stop();
          });
          streamRef.current = null;
        }
        
        try {
          const audioBlob = new Blob(audioChunksRef.current, { 
            type: isIOSPWA ? 'audio/mp4' : 'audio/webm' 
          });
          const arrayBuffer = await audioBlob.arrayBuffer();

          console.log('üì§ Sending audio to Whisper...');
          const response = await fetch('/api/whisper', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/octet-stream',
            },
            body: arrayBuffer
          });

          if (!response.ok) {
            throw new Error(`Whisper API failed: HTTP ${response.status}`);
          }

          const data = await response.json();
          console.log('‚úÖ Whisper transcribed:', data.text);
          
          if (data.text && data.text.trim()) {
            onTranscript(data.text.trim());
          } else {
            console.warn('‚ö†Ô∏è Empty transcription received');
          }

        } catch (error) {
          console.error('üí• Whisper processing error:', error);
          // Zobrazit u≈æivatelsky p≈ô√≠vƒõtivou chybu
          onTranscript('[Chyba p≈ôi rozpozn√°v√°n√≠ ≈ôeƒçi - zkuste to znovu]');
        } finally {
          setIsProcessing(false);
        }
      };

      mediaRecorder.start();
      setIsRecording(true);

    } catch (error) {
      console.error('üí• Recording start error:', error);
      alert('Nepoda≈ôilo se z√≠skat p≈ô√≠stup k mikrofonu. Zkontrolujte opr√°vnƒõn√≠.');
      if (streamRef.current) {
        streamRef.current.getTracks().forEach(track => track.stop());
        streamRef.current = null;
      }
      setIsRecording(false);
      setIsProcessing(false);
    }
  };

  const forceStopRecording = () => {
    console.log('üö® Force stopping recording...');
    
    if (mediaRecorderRef.current) {
      try {
        if (mediaRecorderRef.current.state === 'recording') {
          mediaRecorderRef.current.stop();
        }
      } catch (error) {
        console.error('Error stopping recorder:', error);
      }
      mediaRecorderRef.current = null;
    }
    
    if (streamRef.current) {
      streamRef.current.getTracks().forEach(track => {
        if (track.readyState === 'live') {
          track.stop();
        }
      });
      streamRef.current = null;
    }
    
    setIsRecording(false);
    setIsProcessing(false);
  };

  const handleTouchStart = (e) => {
    e.preventDefault();
    e.stopPropagation();
    touchStartTimeRef.current = Date.now();
    if (!disabled && !isProcessing && !isRecording) {
      startRecording();
    }
  };

  const handleTouchEnd = (e) => {
    e.preventDefault();
    e.stopPropagation();
    const touchDuration = Date.now() - (touchStartTimeRef.current || 0);
    if (touchDuration < 100) {
      return;
    }
    if (isRecording) {
      forceStopRecording();
    }
  };

  const handleTouchCancel = (e) => {
    e.preventDefault();
    e.stopPropagation();
    if (isRecording) {
      forceStopRecording();
    }
  };

  const handleMouseDown = (e) => {
    if (!isIOSPWA && !disabled && !isProcessing && !isRecording) {
      startRecording();
    }
  };

  const handleMouseUp = (e) => {
    if (!isIOSPWA && isRecording) {
      forceStopRecording();
    }
  };

  useEffect(() => {
    const handleVisibilityChange = () => {
      if (document.hidden && isRecording) {
        forceStopRecording();
      }
    };

    const handleBeforeUnload = () => {
      if (isRecording) {
        forceStopRecording();
      }
    };

    document.addEventListener('visibilitychange', handleVisibilityChange);
    window.addEventListener('beforeunload', handleBeforeUnload);

    return () => {
      document.removeEventListener('visibilitychange', handleVisibilityChange);
      window.removeEventListener('beforeunload', handleBeforeUnload);
    };
  }, [isRecording]);

  useEffect(() => {
    return () => {
      if (streamRef.current) {
        streamRef.current.getTracks().forEach(track => track.stop());
      }
    };
  }, []);

  const getButtonStyle = () => {
    const baseStyle = {
      border: 'none',
      borderRadius: '50%',
      padding: 0,
      fontSize: '2rem',
      cursor: disabled ? 'not-allowed' : 'pointer',
      width: '80px',
      height: '80px',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      transition: 'all 0.2s ease',
      userSelect: 'none',
      WebkitUserSelect: 'none',
      WebkitTouchCallout: 'none',
      WebkitTapHighlightColor: 'transparent',
      touchAction: 'none'
    };

    if (isProcessing) return { 
      ...baseStyle,
      backgroundColor: '#ffc107',
      color: 'white',
      boxShadow: '0 0 20px rgba(255, 193, 7, 0.5)',
      animation: 'pulse-processing 1.5s ease-in-out infinite'
    };
    if (isRecording) return { 
      ...baseStyle,
      backgroundColor: '#dc3545',
      color: 'white',
      transform: 'scale(1.1)',
      boxShadow: '0 0 30px rgba(220, 53, 69, 0.6)',
      animation: 'pulse-recording 1s ease-in-out infinite'
    };
    return { 
      ...baseStyle,
      backgroundColor: '#007bff',
      color: 'white',
      boxShadow: '0 0 15px rgba(0, 123, 255, 0.4)'
    };
  };

  const getButtonIcon = () => {
    if (isProcessing) return '‚è≥';
    if (isRecording) return 'üî¥';
    return 'üé§';
  };

  const getButtonTitle = () => {
    if (isProcessing) return 'Zpracov√°v√°m nahr√°vku...';
    if (isRecording) return 'Nahr√°v√°m - pus≈•te pro ukonƒçen√≠';
    return 'Dr≈æte pro mluven√≠';
  };

  return (
    <button
      onTouchStart={handleTouchStart}
      onTouchEnd={handleTouchEnd}
      onTouchCancel={handleTouchCancel}
      onMouseDown={handleMouseDown}
      onMouseUp={handleMouseUp}
      onMouseLeave={() => !isIOSPWA && isRecording && forceStopRecording()}
      disabled={disabled || isProcessing}
      title={getButtonTitle()}
      style={getButtonStyle()}
    >
      {getButtonIcon()}
    </button>
  );
};

// üîä ENHANCED VOICE BUTTON s ƒçesk√Ωm TTS preprocessingem
const VoiceButton = ({ text, onAudioStart, onAudioEnd }) => {
  const [isPlaying, setIsPlaying] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const audioRef = useRef(null);

  useEffect(() => {
    const handleNewAudio = () => {
      if (audioRef.current && !audioRef.current.paused) {
        audioRef.current.pause();
        audioRef.current.currentTime = 0;
        setIsPlaying(false);
        if (onAudioEnd) onAudioEnd();
      }
    };

    window.addEventListener('omnia-audio-start', handleNewAudio);
    return () => window.removeEventListener('omnia-audio-start', handleNewAudio);
  }, [onAudioEnd]);

  const handleSpeak = async () => {
    if (isPlaying) {
      if (audioRef.current) {
        audioRef.current.pause();
        audioRef.current.currentTime = 0;
      }
      setIsPlaying(false);
      if (onAudioEnd) onAudioEnd();
      return;
    }

    try {
      setIsLoading(true);
      window.dispatchEvent(new CustomEvent('omnia-audio-start'));
      if (onAudioStart) onAudioStart();

      // üéØ NOV√â: Pou≈æit√≠ ƒçesk√©ho TTS preprocessingu
      const processedText = preprocessCzechTextForTTS(text);
      console.log('üéµ Sending processed text to TTS:', processedText.substring(0, 100));

      const response = await fetch('/api/voice', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          text: processedText, // Pou≈æ√≠v√°me p≈ôedpracovan√Ω text
          language: 'cs', // Explicitnƒõ ƒçe≈°tinu
          voice: 'natural' // P≈ôirozen√Ω hlas
        })
      });

      if (!response.ok) {
        throw new Error(`TTS API failed: HTTP ${response.status}`);
      }

      const audioBlob = await response.blob();
      const audioUrl = URL.createObjectURL(audioBlob);

      if (audioRef.current) {
        audioRef.current.pause();
      }

      const audio = new Audio(audioUrl);
      audioRef.current = audio;

      audio.onplay = () => {
        setIsPlaying(true);
        console.log('üîä Enhanced TTS playback started');
      };
      
      audio.onended = () => {
        setIsPlaying(false);
        if (onAudioEnd) onAudioEnd();
        URL.revokeObjectURL(audioUrl);
        console.log('‚úÖ Enhanced TTS playback finished');
      };
      
      audio.onerror = (e) => {
        console.error('‚ùå TTS playback error:', e);
        setIsPlaying(false);
        setIsLoading(false);
        if (onAudioEnd) onAudioEnd();
        URL.revokeObjectURL(audioUrl);
      };

      await audio.play();

    } catch (error) {
      console.error('üí• Enhanced TTS error:', error);
      if (onAudioEnd) onAudioEnd();
    } finally {
      setIsLoading(false);
    }
  };

  const getButtonStyle = () => {
    return {
      background: 'none',
      border: 'none',
      cursor: isLoading ? 'wait' : 'pointer',
      padding: '4px',
      borderRadius: '4px',
      display: 'flex',
      alignItems: 'center',
      fontSize: '0.9rem',
      opacity: isLoading ? 0.5 : 0.7,
      transition: 'all 0.2s ease',
      position: 'relative'
    };
  };

  const getButtonIcon = () => {
    if (isLoading) return '‚è≥';
    if (isPlaying) return '‚è∏Ô∏è';
    return 'üîä';
  };

  const getButtonTitle = () => {
    if (isLoading) return 'Generuji ƒçesk√Ω zvuk...';
    if (isPlaying) return 'Klepnƒõte pro zastaven√≠';
    return 'P≈ôehr√°t s ƒçesk√Ωm TTS';
  };

  return (
    <button
      onClick={handleSpeak}
      disabled={isLoading}
      style={getButtonStyle()}
      title={getButtonTitle()}
      onMouseEnter={(e) => e.target.style.opacity = '1'}
      onMouseLeave={(e) => e.target.style.opacity = isLoading ? '0.5' : '0.7'}
    >
      {getButtonIcon()}
      {isLoading && (
        <span style={{ 
          fontSize: '0.7rem', 
          marginLeft: '4px', 
          color: '#ffc107',
          fontWeight: '500'
        }}>
          ƒåe≈°tina
        </span>
      )}
    </button>
  );
};// üîé ENHANCED SONAR SERVICE s lep≈°√≠ optimalizac√≠
const sonarService = {
  async search(query, showNotification) {
    try {
      console.log('üîé Enhanced Sonar searching for:', query);
      showNotification('üîç Vyhled√°v√°m nejnovƒõj≈°√≠ informace...', 'info');

      const enhancedQuery = this.enhanceQueryForCurrentData(query);
      console.log('üéØ Enhanced query:', enhancedQuery);

      const response = await fetch('/api/sonar-search', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          query: enhancedQuery,
          freshness: 'recent',
          count: 10
        })
      });

      if (!response.ok) {
        throw new Error(`Sonar request failed: ${response.status}`);
      }

      const data = await response.json();
      if (!data.success || !data.result) {
        throw new Error('Invalid Sonar response');
      }

      showNotification('‚úÖ Nalezeny aktu√°ln√≠ informace!', 'success');
      
      return {
        success: true,
        result: data.result,
        citations: data.citations || [],
        sources: data.sources || [],
        source: 'sonar_search'
      };
    } catch (error) {
      console.error('üí• Enhanced Sonar error:', error);
      showNotification(`Chyba p≈ôi vyhled√°v√°n√≠: ${error.message}`, 'error');
      return {
        success: false,
        message: `Chyba p≈ôi vyhled√°v√°n√≠: ${error.message}`,
        source: 'sonar_search'
      };
    }
  },

  enhanceQueryForCurrentData(originalQuery) {
    const query = originalQuery.toLowerCase();
    const currentYear = new Date().getFullYear();
    const currentMonth = new Date().toLocaleDateString('cs-CZ', { month: 'long' });
    
    if (query.includes('2024') || query.includes('2025')) {
      return originalQuery;
    }

    const temporalTriggers = [
      'aktu√°ln√≠', 'dne≈°n√≠', 'souƒçasn√Ω', 'nejnovƒõj≈°√≠', 'posledn√≠', 'nejƒçerstvƒõj≈°√≠',
      'zpr√°vy', 'novinky', 'aktuality', 'ud√°losti', 'situace',
      'cena', 'kurz', 'poƒças√≠', 'teplota', 'p≈ôedpovƒõƒè',
      'dnes', 'teƒè', 'moment√°lnƒõ', 'nyn√≠', 'v souƒçasnosti',
      'current', 'latest', 'recent', 'today', 'now'
    ];

    const needsTimeFilter = temporalTriggers.some(trigger => query.includes(trigger));
    
    if (needsTimeFilter) {
      return `${originalQuery} ${currentYear} ${currentMonth} aktu√°ln√≠ nejnovƒõj≈°√≠`;
    }

    const financialKeywords = ['cena', 'kurz', 'akcie', 'burza', 'bitcoin', 'krypto', 'ethereum', 'investice'];
    if (financialKeywords.some(keyword => query.includes(keyword))) {
      return `${originalQuery} ${currentYear} aktu√°ln√≠ cena trh`;
    }

    const newsKeywords = ['zpr√°vy', 'novinky', 'aktuality', 'ud√°losti', 'situace', 'krize', 'v√°lka'];
    if (newsKeywords.some(keyword => query.includes(keyword))) {
      return `${originalQuery} ${currentYear} nejnovƒõj≈°√≠ zpr√°vy aktuality`;
    }

    const weatherKeywords = ['poƒças√≠', 'teplota', 'd√©≈°≈•', 'sn√≠h', 'bou≈ôe', 'p≈ôedpovƒõƒè'];
    if (weatherKeywords.some(keyword => query.includes(keyword))) {
      return `${originalQuery} dnes aktu√°ln√≠ p≈ôedpovƒõƒè`;
    }

    return `${originalQuery} ${currentYear}`;
  }
};

// üîç ENHANCED GOOGLE SEARCH SERVICE
const googleSearchService = {
  async search(query, showNotification) {
    try {
      showNotification('üîç Vyhled√°v√°m p≈ôes Google...', 'info');
      
      const response = await fetch('/api/google-search', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          query,
          freshness: 'recent',
          lang: 'cs'
        })
      });
      
      if (!response.ok) {
        throw new Error(`Google search failed: ${response.status}`);
      }
      
      const data = await response.json();
      if (!data.success || !data.results) {
        throw new Error('Invalid Google search response');
      }
      
      showNotification('‚úÖ Google v√Ωsledky nalezeny!', 'success');
      
      return data.results.map(r => `${r.title}\n${r.snippet}\n${r.link}`).join('\n\n');
    } catch (error) {
      console.error('üí• Enhanced Google search error:', error);
      showNotification(`Google search chyba: ${error.message}`, 'error');
      return '';
    }
  }
};

// üîî ENHANCED NOTIFICATION HELPER s lep≈°√≠mi styly
const showNotificationHelper = (message, type = 'info', onClick = null) => {
  const notification = document.createElement('div');
  
  const getNotificationStyle = (type) => {
    const baseStyle = `
      position: fixed;
      top: 80px;
      right: 20px;
      padding: 12px 18px;
      border-radius: 10px;
      font-size: 14px;
      z-index: 10000;
      cursor: ${onClick ? 'pointer' : 'default'};
      box-shadow: 0 6px 20px rgba(0,0,0,0.25);
      font-weight: 500;
      max-width: 350px;
      transition: all 0.3s ease;
      border: 1px solid;
    `;
    
    switch(type) {
      case 'error':
        return baseStyle + `
          background: linear-gradient(135deg, #dc3545, #c82333);
          color: white;
          border-color: rgba(255,255,255,0.2);
        `;
      case 'success':
        return baseStyle + `
          background: linear-gradient(135deg, #28a745, #20c997);
          color: white;
          border-color: rgba(255,255,255,0.2);
        `;
      case 'streaming':
        return baseStyle + `
          background: linear-gradient(135deg, #00ffff, #0096ff);
          color: white;
          border-color: rgba(255,255,255,0.2);
          animation: pulse-notification 1.5s ease-in-out infinite;
        `;
      case 'info':
      default:
        return baseStyle + `
          background: linear-gradient(135deg, #007bff, #0096ff);
          color: white;
          border-color: rgba(255,255,255,0.2);
        `;
    }
  };
  
  notification.style.cssText = getNotificationStyle(type);
  notification.textContent = message;
  
  if (onClick) {
    notification.addEventListener('click', () => {
      onClick();
      document.body.removeChild(notification);
    });
    notification.style.cursor = 'pointer';
  }
  
  notification.addEventListener('mouseenter', () => {
    notification.style.transform = 'translateY(-2px) scale(1.02)';
  });
  
  notification.addEventListener('mouseleave', () => {
    notification.style.transform = 'translateY(0) scale(1)';
  });
  
  document.body.appendChild(notification);
  
  setTimeout(() => {
    if (document.body.contains(notification)) {
      notification.style.opacity = '0';
      notification.style.transform = 'translateY(-10px) scale(0.95)';
      setTimeout(() => {
        if (document.body.contains(notification)) {
          document.body.removeChild(notification);
        }
      }, 300);
    }
  }, type === 'error' ? 6000 : type === 'streaming' ? 8000 : 4000);
};// üöÄ OPRAVEN√ù STREAMING CLAUDE SERVICE - FUNGUJE!
const claudeService = {
  async sendMessage(messages, onStreamUpdate = null, onSearchNotification = null) {
    try {
      console.log('üîß OPRAVEN√ù STREAMING Claude service: Using /api/claude2');
      const claudeMessages = prepareClaudeMessages(messages);
      
      const systemPrompt = `Jsi Omnia, pokroƒçil√Ω ƒçesk√Ω AI asistent s n√°sleduj√≠c√≠mi schopnostmi:

üîç WEB_SEARCH - M√°≈° p≈ô√≠stup k web_search funkci pro vyhled√°v√°n√≠ aktu√°ln√≠ch informac√≠ na internetu
üìä ANAL√ùZA DAT - M≈Ø≈æe≈° analyzovat data a poskytovat insights  
üéØ EXTENDED THINKING - Pou≈æ√≠v√°≈° pokroƒçil√© reasoning s tool use
üéµ ƒåESK√ù TTS - Tvoje odpovƒõdi budou p≈ôeƒçteny ƒçesk√Ωm hlasem

D≈ÆLE≈ΩIT√â INSTRUKCE:
- Odpov√≠dej V≈ΩDY v√Ωhradnƒõ v ƒçe≈°tinƒõ, gramaticky spr√°vnƒõ a p≈ôirozenƒõ
- Pi≈° struƒçnƒõ, jako chytr√Ω a lidsky znƒõj√≠c√≠ ƒçlovƒõk
- NEPI≈† "Jsem AI" ani se nijak nep≈ôedstavuj
- Automaticky pou≈æ√≠vej web_search kdy≈æ pot≈ôebuje≈° aktu√°ln√≠ informace
- Kdy≈æ pou≈æije≈° web_search, V≈ΩDY poskytni konkr√©tn√≠ odpovƒõƒè na z√°kladƒõ nalezen√Ωch informac√≠
- NIKDY ne≈ô√≠kej "zkontroluj na jin√Ωch str√°nk√°ch" nebo "hledej jinde"
- Buƒè konkr√©tn√≠, u≈æiteƒçn√Ω a p≈ô√≠mo odpovƒõz na u≈æivatelovu ot√°zku
- Tvoje text bude p≈ôeveden na ≈ôeƒç, tak pi≈° p≈ôirozenƒõ pro mluven√≠
- Vyh√Ωbej se slo≈æit√Ωm technick√Ωm term√≠n≈Øm bez vysvƒõtlen√≠`;
      
      const response = await fetch('/api/claude2', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          messages: claudeMessages,
          system: systemPrompt,
          max_tokens: 2000
        })
      });

      if (!response.ok) {
        throw new Error(`Claude API failed: HTTP ${response.status}`);
      }

      console.log('‚úÖ STREAMING response started from Claude');

      // üöÄ OPRAVEN√ù STREAMING READER SETUP
      const reader = response.body.getReader();
      const decoder = new TextDecoder();
      
      let fullText = '';
      let buffer = '';

      try {
        while (true) {
          const { done, value } = await reader.read();
          
          if (done) {
            console.log('‚úÖ STREAMING completed');
            break;
          }

          buffer += decoder.decode(value, { stream: true });
          const lines = buffer.split('\n');
          buffer = lines.pop() || '';

          for (const line of lines) {
            if (line.trim()) {
              try {
                const data = JSON.parse(line);
                
                // üì∫ Handle different stream events
                if (data.type === 'text' && data.content) {
                  fullText += data.content;
                  
                  // üéØ REAL-TIME UPDATE CALLBACK
                  if (onStreamUpdate) {
                    onStreamUpdate(fullText, true); // true = still streaming
                  }
                }
                else if (data.type === 'search_start') {
                  console.log('üîç Web search started during streaming');
                  
                  // üîç SEARCH NOTIFICATION CALLBACK  
                  if (onSearchNotification) {
                    onSearchNotification(data.message || 'üîç Vyhled√°v√°m aktu√°ln√≠ informace...');
                  }
                }
                else if (data.type === 'completed') {
                  console.log('‚úÖ Streaming completed with full text');
                  
                  if (data.fullText) {
                    fullText = data.fullText;
                  }
                  
                  // üéØ FINAL UPDATE CALLBACK
                  if (onStreamUpdate) {
                    onStreamUpdate(fullText, false); // false = streaming finished
                  }
                }
                else if (data.error) {
                  throw new Error(data.message || 'Streaming error');
                }

              } catch (parseError) {
                // Some lines might not be JSON, continue
                console.warn('‚ö†Ô∏è Non-JSON line:', line);
                continue;
              }
            }
          }
        }
      } catch (streamError) {
        console.error('üí• Streaming read error:', streamError);
        throw streamError;
      }

      console.log('‚úÖ OPRAVEN√ù STREAMING Claude response completed');
      return fullText;

    } catch (error) {
      console.error('üí• OPRAVEN√ù STREAMING Claude error:', error);
      throw error;
    }
  }
};

// ü§ñ ENHANCED OPENAI SERVICE (bez streaming, ale p≈ôipraven√Ω)
const openaiService = {
  async sendMessage(messages) {
    try {
      console.log('üîß Enhanced OpenAI service: Using /api/openai');
      const response = await fetch('/api/openai', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          messages,
          temperature: 0.7,
          max_tokens: 2000
        })
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || `HTTP ${response.status}`);
      }

      const data = await response.json();
      
      if (!data.choices || !data.choices[0] || !data.choices[0].message) {
        throw new Error('Invalid response structure from OpenAI');
      }

      console.log('‚úÖ Enhanced OpenAI response received');
      return data.choices[0].message.content;
    } catch (error) {
      console.error('üí• Enhanced OpenAI error:', error);
      throw error;
    }
  }
};

// üéµ ENHANCED AUDIO GENERATION s ƒçesk√Ωm TTS preprocessingem
const generateInstantAudio = async (responseText, setIsAudioPlaying, currentAudioRef, isIOS, showNotification) => {
  try {
    console.log('üöÄ Generating ENHANCED instant audio response...');
    
    // üéØ NOV√â: Pou≈æit√≠ ƒçesk√©ho TTS preprocessingu
    const processedText = preprocessCzechTextForTTS(responseText);
    console.log('üéµ Processed text for TTS:', processedText.substring(0, 100));
    
    showNotification('üéµ Generuji ƒçesk√Ω hlas...', 'info');
    
    const response = await fetch('/api/voice', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ 
        text: processedText, // Pou≈æ√≠v√°me p≈ôedpracovan√Ω text
        language: 'cs', // Explicitnƒõ ƒçe≈°tinu
        voice: 'natural' // P≈ôirozen√Ω hlas
      })
    });

    if (!response.ok) {
      throw new Error(`Enhanced Voice API failed: ${response.status}`);
    }

    setIsAudioPlaying(true);
    showNotification('üîä P≈ôehr√°v√°m odpovƒõƒè...', 'success');

    const audioBlob = await response.blob();
    const audioUrl = URL.createObjectURL(audioBlob);
    const audio = new Audio(audioUrl);
    
    currentAudioRef.current = audio;
    audio.preload = 'auto';
    audio.volume = 1.0;
    
    if (isIOS) {
      audio.load();
    }
    
    let playbackInterrupted = false;
    
    const handleInterrupt = () => {
      playbackInterrupted = true;
      if (!audio.paused) {
        audio.pause();
        audio.currentTime = 0;
      }
      setIsAudioPlaying(false);
      currentAudioRef.current = null;
      URL.revokeObjectURL(audioUrl);
    };
    
    window.addEventListener('omnia-audio-start', handleInterrupt, { once: true });
    
    audio.onplay = () => {
      if (!playbackInterrupted) {
        console.log('üéµ Enhanced Czech TTS started playing!');
      }
    };
    
    audio.onended = () => {
      console.log('‚úÖ Enhanced Czech TTS finished');
      setIsAudioPlaying(false);
      currentAudioRef.current = null;
      URL.revokeObjectURL(audioUrl);
      window.removeEventListener('omnia-audio-start', handleInterrupt);
    };
    
    audio.onerror = (e) => {
      console.error('‚ùå Enhanced TTS audio error:', e);
      setIsAudioPlaying(false);
      currentAudioRef.current = null;
      URL.revokeObjectURL(audioUrl);
      window.removeEventListener('omnia-audio-start', handleInterrupt);
      showNotification('üîá Chyba p≈ôi p≈ôehr√°v√°n√≠', 'error');
    };
    
    try {
      await audio.play();
      console.log('üéØ Enhanced Czech TTS plays IMMEDIATELY after AI response!');
    } catch (playError) {
      console.error('‚ùå Auto-play blocked:', playError);
      showNotification('üîä Klepnƒõte pro p≈ôehr√°n√≠ ƒçesk√© odpovƒõdi', 'info', () => {
        audio.play().catch(console.error);
      });
    }
    
    return audio;
    
  } catch (error) {
    console.error('üí• Enhanced instant audio generation failed:', error);
    setIsAudioPlaying(false);
    currentAudioRef.current = null;
    showNotification('üîá ƒåesk√Ω hlas se nepoda≈ôilo vygenerovat', 'error');
    throw error;
  }
};// üö® ENHANCED shouldSearchInternet - Claude NIKDY netrigguje search preprocessing
const shouldSearchInternet = (userInput, model) => {
  if (model === 'claude') {
    return false; // Claude Sonnet 4 si web_search ≈ô√≠d√≠ s√°m
  }

  if (model !== 'gpt-4o') {
    return false;
  }

  const input = (userInput || '').toLowerCase();

  // Roz≈°√≠≈ôen√© conversational phrases
  const conversationalPhrases = [
    'jak se m√°', 'co dƒõl√°≈°', 'ahoj', 'ƒçau', 'dobr√Ω den', 'dobr√Ω veƒçer', 'dobr√© r√°no',
    'dƒõkuji', 'd√≠ky', 'jak se jmenuje≈°', 'kdo jsi', 'p≈ôedstav se',
    'um√≠≈°', 'm≈Ø≈æe≈° mi', 'co um√≠≈°', 'jak funguje', 'vysvƒõtli mi',
    'co je to', 'vysvƒõtli', '≈ôekni mi', 'pomoƒç', 'pomoz', 'pomoz mi',
    'jak na to', 'co si mysl√≠≈°', 'jak√Ω je tv≈Øj n√°zor', 'co mysl√≠≈°',
    'doporuƒç mi', 'jak se c√≠t√≠≈°', 'bav√≠me se', 'pov√≠dej', 'pov√≠dej si se mnou',
    'napi≈° mi', 'vytvo≈ô', 'spoƒç√≠tej', 'p≈ôekladej', 'p≈ôelo≈æ mi',
    'jak postupovat', 'co bys doporuƒçil', 'm√°≈° radu', 'co dƒõlat',
    'shr≈à mi', 'zkra≈• mi', 'zjednodu≈°uj', 'vyber hlavn√≠ body'
  ];

  for (const phrase of conversationalPhrases) {
    if (input.includes(phrase)) {
      return false;
    }
  }

  // Roz≈°√≠≈ôen√© search triggers
  const searchTriggers = [
    'najdi', 'vyhledej', 'hledej', 'aktu√°ln√≠', 'dne≈°n√≠', 'souƒçasn√Ω', 'nejnovƒõj≈°√≠',
    'zpr√°vy', 'novinky', 'aktuality', 'poƒças√≠', 'kurz', 'cena', 'ceny',
    'co je nov√©ho', 'co se dƒõje', 'posledn√≠', 'recent', 'latest',
    'current', 'today', 'now', 'dnes', 'teƒè', 'moment√°lnƒõ',
    'stav', 'situace', 'v√Ωvoj', 'trendy', 'statistiky',
    'burza', 'akcie', 'investice', 'krypto', 'bitcoin',
    'p≈ôedpovƒõƒè', 'progn√≥za', 'odhad', 'anal√Ωza trhu'
  ];

  for (const trigger of searchTriggers) {
    if (input.includes(trigger)) {
      return true;
    }
  }

  // Automatic year/date triggers
  if (input.includes('2024') || input.includes('2025') ||
      input.includes('bitcoin') || input.includes('ethereum') ||
      input.includes('akcie') || input.includes('volby')) {
    return true;
  }

  return false;
};

// ‚úÖ OPRAVEN√ù VOICE SCREEN RESPONSE Handler s FUNKƒåN√çM STREAMING
const handleVoiceScreenResponse = async (
  textInput,
  currentMessages,
  model,
  openaiService,
  claudeService,
  setMessages,
  setLoading,
  setIsAudioPlaying,
  currentAudioRef,
  isIOS,
  showNotification,
  setStreaming = null
) => {
  try {
    console.log('üîß OPRAVEN√ù STREAMING Voice Screen Model:', model);

    // P≈ôid√°n√≠ user message do historie p≈ôed zpracov√°n√≠m
    const userMessage = { sender: 'user', text: textInput };
    const messagesWithUser = [...currentMessages, userMessage];
    setMessages(messagesWithUser);
    localStorage.setItem('omnia-memory', JSON.stringify(messagesWithUser));

    let responseText = '';

    if (model === 'sonar') {
      showNotification('üîç Omnia Search analyzuje dotaz...', 'info');
      const searchResult = await sonarService.search(textInput, showNotification);
      if (searchResult.success) {
        responseText = searchResult.result;
        if (searchResult.sources && searchResult.sources.length > 0) {
          responseText += `\n\nZdroje: ${searchResult.sources.slice(0, 3).join(', ')}`;
        }
      } else {
        responseText = `Omlou√°m se, ale nepoda≈ôilo se mi naj√≠t aktu√°ln√≠ informace: ${searchResult.message}`;
      }
      
      // Pro non-Claude modely - standardn√≠ p≈ôid√°n√≠ odpovƒõdi
      const finalMessages = [...messagesWithUser, { sender: 'bot', text: responseText }];
      setMessages(finalMessages);
      localStorage.setItem('omnia-memory', JSON.stringify(finalMessages));
    }
    else if (model === 'claude') {
      console.log('üöÄ OPRAVEN√ù STREAMING Claude Sonnet 4 via /api/claude2');
      showNotification('ü§ñ Omnia zaƒç√≠n√° streamovat...', 'streaming');
      
      if (setStreaming) setStreaming(true);

      // Vytvo≈ôen√≠ pr√°zdn√© bot message pro streaming
      const streamingBotMessage = { sender: 'bot', text: '', isStreaming: true };
      const messagesWithBot = [...messagesWithUser, streamingBotMessage];
      setMessages(messagesWithBot);

      // üöÄ OPRAVEN√â STREAMING CALLBACKS
      const onStreamUpdate = (text, isStillStreaming) => {
        console.log(`üì∫ Voice Stream update: ${text.length} chars, streaming: ${isStillStreaming}`);
        
        // Update bot message s nov√Ωm textem
        const updatedMessages = [...messagesWithUser, { 
          sender: 'bot', 
          text: text, 
          isStreaming: isStillStreaming 
        }];
        setMessages(updatedMessages);
        
        if (!isStillStreaming) {
          // Streaming dokonƒçen
          localStorage.setItem('omnia-memory', JSON.stringify(updatedMessages));
          if (setStreaming) setStreaming(false);
          showNotification('‚úÖ Omnia dokonƒçila odpovƒõƒè!', 'success');
          responseText = text; // Nastavit responseText pro audio
        }
      };

      const onSearchNotification = (message) => {
        console.log('üîç Voice Search notification:', message);
        showNotification(message, 'streaming');
      };

      responseText = await claudeService.sendMessage(
        messagesWithUser, 
        onStreamUpdate, 
        onSearchNotification
      );
    }
    else if (model === 'gpt-4o') {
      console.log('üöÄ Enhanced GPT-4o via /api/openai');
      showNotification('üß† GPT analyzuje dotaz...', 'info');
      
      let searchContext = '';
      const needsSearch = shouldSearchInternet(textInput, model);
      
      if (needsSearch) {
        const googleResults = await googleSearchService.search(textInput, showNotification);
        if (googleResults) {
          searchContext = `\n\nAKTU√ÅLN√ç INFORMACE Z INTERNETU (Google):\n${googleResults}\n\nNa z√°kladƒõ tƒõchto aktu√°ln√≠ch informac√≠ z internetu odpovƒõz u≈æivateli ƒçesky a p≈ôirozenƒõ.`;
        }
      }

      const openAiMessages = [
        {
          role: 'system',
          content: `Jsi GPT, ƒçesk√Ω AI asistent optimalizovan√Ω pro hlasov√© odpovƒõdi. 

D≈ÆLE≈ΩIT√â INSTRUKCE:
- Odpov√≠dej V√ùHRADNƒö v ƒçe≈°tinƒõ, ka≈æd√© slovo mus√≠ b√Ωt ƒçesk√©
- Nikdy nepou≈æ√≠vej anglick√° slova nebo v√Ωrazy
- Zaƒç√≠nej odpovƒõdi p≈ô√≠mo ƒçesky, bez anglick√Ωch fr√°z√≠
- Pi≈° struƒçnƒõ a p≈ôirozenƒõ jako rodil√Ω mluvƒç√≠ ƒçe≈°tiny pro hlasov√© p≈ôehr√°n√≠
- Nepi≈° "Jsem AI" ani se nijak nep≈ôedstavuj
- Tvoje odpovƒõƒè bude p≈ôeƒçtena ƒçesk√Ωm hlasem, tak ji formuluj p≈ôirozenƒõ
- Vyh√Ωbaj se slo≈æit√Ωm ƒç√≠sl≈Øm a technick√Ωm term√≠n≈Øm
- Pou≈æ√≠vej ka≈ædodenn√≠ ƒçesk√Ω jazyk${searchContext}`
        },
        ...currentMessages.map((msg) => ({
          role: msg.sender === 'user' ? 'user' : 'assistant',
          content: msg.text
        })),
        { role: 'user', content: textInput }
      ];

      responseText = await openaiService.sendMessage(openAiMessages);
      
      // Pro non-Claude modely - standardn√≠ p≈ôid√°n√≠ odpovƒõdi
      const finalMessages = [...messagesWithUser, { sender: 'bot', text: responseText }];
      setMessages(finalMessages);
      localStorage.setItem('omnia-memory', JSON.stringify(finalMessages));
    }
    else {
      throw new Error(`Nezn√°m√Ω model: ${model}`);
    }

    // Enhanced instant audio generation (pouze pro dokonƒçen√© odpovƒõdi)
    if (responseText && model !== 'claude') {
      await generateInstantAudio(
        responseText,
        setIsAudioPlaying,
        currentAudioRef,
        isIOS,
        showNotification
      );
    }

    return responseText;

  } catch (error) {
    console.error('üí• OPRAVEN√ù STREAMING Voice Screen response error:', error);

    if (setStreaming) setStreaming(false);

    const errorText = `Omlou√°m se, ale vyskytla se chyba: ${error.message}`;
    const errorMessages = [...currentMessages, { sender: 'bot', text: errorText }];
    setMessages(errorMessages);
    localStorage.setItem('omnia-memory', JSON.stringify(errorMessages));
    
    showNotification(`Chyba: ${error.message}`, 'error');

    throw error;
  }
};

// ‚úÖ OPRAVEN√ù TEXT RESPONSE Handler s FUNKƒåN√çM STREAMING
const handleTextResponse = async (
  textInput,
  currentMessages,
  model,
  openaiService,
  claudeService,
  setMessages,
  showNotification,
  setStreaming = null
) => {
  console.log('üîß OPRAVEN√ù STREAMING Text Response Model:', model);

  // P≈ôid√°n√≠ user message do historie p≈ôed zpracov√°n√≠m
  const userMessage = { sender: 'user', text: textInput };
  const messagesWithUser = [...currentMessages, userMessage];
  setMessages(messagesWithUser);
  localStorage.setItem('omnia-memory', JSON.stringify(messagesWithUser));

  let responseText = '';

  if (model === 'sonar') {
    showNotification('üîç Omnia Search vyhled√°v√°...', 'info');
    const searchResult = await sonarService.search(textInput, showNotification);
    if (searchResult.success) {
      responseText = searchResult.result;
      // P≈ôid√°n√≠ citac√≠ pokud existuj√≠
      if (searchResult.citations && searchResult.citations.length > 0) {
        responseText += `\n\nüìö Zdroje:\n${searchResult.citations.map(c => `‚Ä¢ ${c}`).join('\n')}`;
      }
    } else {
      responseText = `Nepoda≈ôilo se naj√≠t aktu√°ln√≠ informace: ${searchResult.message}`;
    }
    
    // Pro non-Claude modely - standardn√≠ p≈ôid√°n√≠ odpovƒõdi
    const updatedMessages = [...messagesWithUser, { sender: 'bot', text: responseText }];
    setMessages(updatedMessages);
    localStorage.setItem('omnia-memory', JSON.stringify(updatedMessages));
    showNotification('‚úÖ Odpovƒõƒè p≈ôipravena', 'success');
  }
  else if (model === 'claude') {
    console.log('üöÄ OPRAVEN√ù STREAMING Claude Sonnet 4 via /api/claude2');
    showNotification('ü§ñ Omnia zaƒç√≠n√° streamovat...', 'streaming');
    
    if (setStreaming) setStreaming(true);

    // Vytvo≈ôen√≠ pr√°zdn√© bot message pro streaming
    const streamingBotMessage = { sender: 'bot', text: '', isStreaming: true };
    const messagesWithBot = [...messagesWithUser, streamingBotMessage];
    setMessages(messagesWithBot);

    // üöÄ OPRAVEN√â STREAMING CALLBACKS
    const onStreamUpdate = (text, isStillStreaming) => {
      console.log(`üì∫ Text Stream update: ${text.length} chars, streaming: ${isStillStreaming}`);
      
      // Update bot message s nov√Ωm textem
      const updatedMessages = [...messagesWithUser, { 
        sender: 'bot', 
        text: text, 
        isStreaming: isStillStreaming 
      }];
      setMessages(updatedMessages);
      
      if (!isStillStreaming) {
        // Streaming dokonƒçen
        localStorage.setItem('omnia-memory', JSON.stringify(updatedMessages));
        if (setStreaming) setStreaming(false);
        showNotification('‚úÖ Omnia dokonƒçila odpovƒõƒè!', 'success');
      }
    };

    const onSearchNotification = (message) => {
      console.log('üîç Text Search notification:', message);
      showNotification(message, 'streaming');
    };

    responseText = await claudeService.sendMessage(
      messagesWithUser, 
      onStreamUpdate, 
      onSearchNotification
    );
  }
  else if (model === 'gpt-4o') {
    console.log('üöÄ Enhanced GPT-4o via /api/openai');
    showNotification('üß† GPT zpracov√°v√°...', 'info');
    
    let searchContext = '';
    const needsSearch = shouldSearchInternet(textInput, model);
    
    if (needsSearch) {
      const googleResults = await googleSearchService.search(textInput, showNotification);
      if (googleResults) {
        searchContext = `\n\nAKTU√ÅLN√ç INFORMACE Z INTERNETU (Google):\n${googleResults}\n\nNa z√°kladƒõ tƒõchto aktu√°ln√≠ch informac√≠ z internetu odpovƒõz u≈æivateli.`;
      }
    }

    const openAiMessages = [
      {
        role: 'system',
        content: `Jsi GPT, ƒçesk√Ω AI asistent. 

D≈ÆLE≈ΩIT√â INSTRUKCE:
- Odpov√≠dej V√ùHRADNƒö v ƒçe≈°tinƒõ, ka≈æd√© slovo mus√≠ b√Ωt ƒçesk√©
- Nikdy nepou≈æ√≠vej anglick√° slova
- Zaƒç√≠nej odpovƒõdi p≈ô√≠mo ƒçesky
- Pi≈° struƒçnƒõ a p≈ôirozenƒõ jako rodil√Ω mluvƒç√≠ ƒçe≈°tiny
- Nepi≈° "Jsem AI" ani se nijak nep≈ôedstavuj
- Buƒè konkr√©tn√≠ a u≈æiteƒçn√Ω
- Poskytuj strukturovan√© odpovƒõdi kdy≈æ je to vhodn√©${searchContext}`
      },
      ...currentMessages.map((msg) => ({
        role: msg.sender === 'user' ? 'user' : 'assistant',
        content: msg.text
      })),
      { role: 'user', content: textInput }
    ];

    responseText = await openaiService.sendMessage(openAiMessages);
    
    // Pro non-Claude modely - standardn√≠ p≈ôid√°n√≠ odpovƒõdi
    const updatedMessages = [...messagesWithUser, { sender: 'bot', text: responseText }];
    setMessages(updatedMessages);
    localStorage.setItem('omnia-memory', JSON.stringify(updatedMessages));
    showNotification('‚úÖ Odpovƒõƒè p≈ôipravena', 'success');
  }
  else {
    throw new Error(`Nezn√°m√Ω model: ${model}`);
  }

  return responseText;
};// üé§ ENHANCED VOICE SCREEN COMPONENT s streaming podporou
const VoiceScreen = ({ 
  onClose, 
  onTranscript, 
  loading, 
  isAudioPlaying,
  isMobile,
  stopCurrentAudio,
  model,
  streaming = false
}) => {

  const handleScreenClick = (e) => {
    if (isAudioPlaying) {
      stopCurrentAudio();
    }
    
    if (e.target === e.currentTarget) {
      onClose();
    }
  };

  const handleCloseClick = () => {
    if (isAudioPlaying) {
      stopCurrentAudio();
    }
    onClose();
  };

  const handleElementClick = (e) => {
    e.stopPropagation();
    if (isAudioPlaying) {
      stopCurrentAudio();
    }
  };

  const getModelName = () => {
    switch(model) {
      case 'claude': return 'Omnia';
      case 'sonar': return 'Omnia Search';
      case 'gpt-4o': return 'GPT';
      default: return 'GPT';
    }
  };

  const getModelDescription = () => {
    switch(model) {
      case 'claude': return streaming ? 'Streamuje odpovƒõƒè v re√°ln√©m ƒçase' : 'Pokroƒçil√Ω AI s web search';
      case 'sonar': return 'Vyhled√°v√°n√≠ v re√°ln√©m ƒçase';
      case 'gpt-4o': return 'Konverzaƒçn√≠ AI asistent';
      default: return 'AI asistent';
    }
  };

  const getStatusMessage = () => {
    if (streaming) {
      return `üöÄ ${getModelName()} streamuje odpovƒõƒè...`;
    }
    if (loading) {
      return `üöÄ ${getModelName()} p≈ôipravuje odpovƒõƒè...`;
    }
    if (isAudioPlaying) {
      return `üîä ${getModelName()} mluv√≠... (klepnƒõte pro stop)`;
    }
    return `üé§ Dr≈æte mikrofon pro mluven√≠`;
  };

  return (
    <div 
      style={{
        position: 'fixed',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        background: streaming 
          ? 'linear-gradient(135deg, #000428, #004e92, #009ffd)' 
          : 'linear-gradient(135deg, #000000, #1a1a2e, #16213e)',
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'center',
        justifyContent: 'center',
        zIndex: 10000,
        color: 'white',
        transition: 'background 0.5s ease'
      }}
      onClick={handleScreenClick}
    >
      <button
        onClick={handleCloseClick}
        style={{
          position: 'absolute',
          top: '20px',
          right: '20px',
          background: 'none',
          border: '2px solid rgba(255,255,255,0.7)',
          color: 'white',
          borderRadius: '50%',
          width: '50px',
          height: '50px',
          fontSize: '1.5rem',
          cursor: 'pointer',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          transition: 'all 0.2s ease'
        }}
        onMouseEnter={(e) => {
          e.target.style.background = 'rgba(255,255,255,0.1)';
          e.target.style.borderColor = 'white';
        }}
        onMouseLeave={(e) => {
          e.target.style.background = 'none';
          e.target.style.borderColor = 'rgba(255,255,255,0.7)';
        }}
      >
        √ó
      </button>

      <div 
        style={{ marginBottom: '2rem', cursor: 'pointer' }}
        onClick={handleElementClick}
      >
        <OmniaLogo size={isMobile ? 120 : 140} animate={streaming || loading} />
      </div>

      <div style={{
        fontSize: isMobile ? '1.1rem' : '1.3rem',
        fontWeight: '600',
        marginBottom: '1rem',
        textAlign: 'center',
        opacity: 0.9,
        cursor: 'pointer'
      }}
      onClick={handleElementClick}
      >
        {getModelName()}
        {streaming && <span style={{ color: '#00ffff', marginLeft: '8px' }}>‚óè</span>}
      </div>

      <div style={{
        fontSize: isMobile ? '0.9rem' : '1rem',
        marginBottom: '2rem',
        textAlign: 'center',
        opacity: 0.7,
        cursor: 'pointer'
      }}
      onClick={handleElementClick}
      >
        {getModelDescription()}
      </div>

      <div style={{
        fontSize: isMobile ? '1.2rem' : '1.5rem',
        fontWeight: '600',
        marginBottom: '2.5rem',
        textAlign: 'center',
        opacity: 0.9,
        cursor: 'pointer',
        maxWidth: isMobile ? '300px' : '400px',
        lineHeight: '1.4'
      }}
      onClick={handleElementClick}
      >
        {getStatusMessage()}
      </div>

      <div 
        style={{ marginBottom: '3rem' }}
        onClick={handleElementClick}
      >
        <VoiceRecorder 
          onTranscript={onTranscript}
          disabled={loading || streaming}
          mode="conversation"
        />
      </div>

      <div style={{
        fontSize: '0.9rem',
        opacity: 0.6,
        textAlign: 'center',
        maxWidth: '360px',
        lineHeight: '1.4',
        cursor: 'pointer'
      }}
      onClick={handleElementClick}
      >
        {streaming ? (
          `${getModelName()} streamuje ‚Ä¢ Klepnƒõte pro stop`
        ) : isMobile ? (
          `${getModelName()} ‚Ä¢ Klepnƒõte kdekoli pro stop/n√°vrat`
        ) : (
          `${getModelName()} ‚Ä¢ ESC nebo klepnƒõte kdekoli pro stop/n√°vrat`
        )}
      </div>
    </div>
  );
};

// ‚öôÔ∏è ENHANCED SETTINGS DROPDOWN
const SettingsDropdown = ({ isOpen, onClose, onNewChat, model }) => {
  if (!isOpen) return null;

  const getModelName = () => {
    switch(model) {
      case 'claude': return 'Omnia';
      case 'sonar': return 'Omnia Search';
      case 'gpt-4o': return 'GPT';
      default: return 'GPT';
    }
  };

  return (
    <>
      <div
        style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          zIndex: 999
        }}
        onClick={onClose}
      />
      
      <div style={{
        position: 'absolute',
        top: '100%',
        right: 0,
        marginTop: '4px',
        background: '#2d3748',
        border: '1px solid #4a5568',
        borderRadius: '8px',
        boxShadow: '0 4px 12px rgba(0,0,0,0.3)',
        zIndex: 1000,
        minWidth: '220px'
      }}>
        <button
          onClick={() => {
            onNewChat();
            onClose();
          }}
          style={{
            display: 'block',
            width: '100%',
            padding: '0.75rem 1rem',
            border: 'none',
            background: '#2d3748',
            textAlign: 'left',
            fontSize: '0.85rem',
            cursor: 'pointer',
            fontWeight: '400',
            borderRadius: '8px 8px 0 0',
            color: '#e2e8f0'
          }}
          onMouseEnter={(e) => e.target.style.background = '#4a5568'}
          onMouseLeave={(e) => e.target.style.background = '#2d3748'}
        >
          üóëÔ∏è Nov√Ω chat s {getModelName()}
        </button>
        
        <div style={{
          padding: '0.5rem 1rem',
          fontSize: '0.75rem',
          color: '#a0aec0',
          borderTop: '1px solid #4a5568'
        }}>
          üì∫ Real-time streaming FUNKƒåN√ç
        </div>
        
        <div style={{
          padding: '0.5rem 1rem',
          fontSize: '0.75rem',
          color: '#a0aec0'
        }}>
          üéµ ƒåesk√Ω TTS aktivn√≠
        </div>
        
        <div style={{
          padding: '0.5rem 1rem',
          fontSize: '0.75rem',
          color: '#a0aec0'
        }}>
          üìä V√≠ce funkc√≠ brzy...
        </div>
      </div>
    </>
  );
};

// üöÄ FIN√ÅLN√ç MAIN APP COMPONENT s PLNƒö FUNKƒåN√çM STREAMING
function App() {
  const [input, setInput] = useState('');
  const [messages, setMessages] = useState([]);
  const [model, setModel] = useState('claude');
  const [loading, setLoading] = useState(false);
  const [streaming, setStreaming] = useState(false); // üöÄ OPRAVENO: streaming state
  const [isAudioPlaying, setIsAudioPlaying] = useState(false);
  const [showVoiceScreen, setShowVoiceScreen] = useState(false);
  const [showModelDropdown, setShowModelDropdown] = useState(false);
  const [showSettingsDropdown, setShowSettingsDropdown] = useState(false);
  
  const currentAudioRef = useRef(null);
  const endOfMessagesRef = useRef(null);

  const isMobile = window.innerWidth <= 768;
  const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);

  const showNotification = showNotificationHelper;

  const stopCurrentAudio = () => {
    console.log('üîá Stopping current audio...');
    
    if (currentAudioRef.current) {
      currentAudioRef.current.pause();
      currentAudioRef.current.currentTime = 0;
      currentAudioRef.current = null;
    }
    
    setIsAudioPlaying(false);
    window.dispatchEvent(new CustomEvent('omnia-audio-start'));
  };

  const handleNewChat = () => {
    if (isAudioPlaying) {
      stopCurrentAudio();
    }
    if (streaming) {
      setStreaming(false);
    }
    localStorage.removeItem('omnia-memory');
    setMessages([]);
    
    const modelName = model === 'claude' ? 'Omnia' : 
                     model === 'sonar' ? 'Omnia Search' : 'GPT';
    showNotification(`Nov√Ω chat s ${modelName} vytvo≈ôen üéµ`, 'success');
  };

  useEffect(() => {
    const handleKeyPress = (e) => {
      if (e.key === 'Escape') {
        e.preventDefault();
        if (showVoiceScreen) {
          if (isAudioPlaying) {
            stopCurrentAudio();
          }
          if (streaming) {
            setStreaming(false);
          }
          setShowVoiceScreen(false);
        } else if (isAudioPlaying) {
          stopCurrentAudio();
          showNotification('üîá Audio zastaveno', 'info');
        } else if (streaming) {
          setStreaming(false);
          showNotification('‚è∏Ô∏è Streaming zastaven', 'info');
        }
        if (showModelDropdown) {
          setShowModelDropdown(false);
        }
        if (showSettingsDropdown) {
          setShowSettingsDropdown(false);
        }
      }
      
      if (e.key === ' ' && (isAudioPlaying || streaming) && document.activeElement.tagName !== 'INPUT') {
        e.preventDefault();
        if (isAudioPlaying) {
          stopCurrentAudio();
          showNotification('üîá Audio zastaveno mezern√≠kem', 'info');
        }
        if (streaming) {
          setStreaming(false);
          showNotification('‚è∏Ô∏è Streaming zastaven mezern√≠kem', 'info');
        }
      }
    };

    document.addEventListener('keydown', handleKeyPress);
    return () => document.removeEventListener('keydown', handleKeyPress);
  }, [isAudioPlaying, streaming, showVoiceScreen, showModelDropdown, showSettingsDropdown]);

  useEffect(() => {
    const navType = window.performance?.navigation?.type;
    if (navType === 1) {
      localStorage.removeItem('omnia-memory');
      setMessages([]);
    } else {
      const saved = localStorage.getItem('omnia-memory');
      if (saved) {
        try {
          setMessages(JSON.parse(saved));
        } catch {
          setMessages([]);
        }
      }
    }
  }, []);

  const handleSend = async (textInput = input) => {
    if (!textInput.trim()) return;
    if (loading || streaming) return;

    if (isAudioPlaying) {
      stopCurrentAudio();
    }

    setInput('');
    setLoading(true);

    try {
      if (showVoiceScreen) {
        await handleVoiceScreenResponse(
          textInput,
          messages,
          model,
          openaiService,
          claudeService,
          setMessages,
          setLoading,
          setIsAudioPlaying,
          currentAudioRef,
          isIOS,
          showNotification,
          setStreaming // üöÄ OPRAVENO: p≈ôed√°n√≠ streaming setter
        );
      } else {
        await handleTextResponse(
          textInput,
          messages,
          model,
          openaiService,
          claudeService,
          setMessages,
          showNotification,
          setStreaming // üöÄ OPRAVENO: p≈ôed√°n√≠ streaming setter
        );
      }

    } catch (err) {
      console.error('üí• FIN√ÅLN√ç STREAMING API call error:', err);
      showNotification(`Chyba: ${err.message}`, 'error');
    } finally {
      setLoading(false);
      setStreaming(false);
    }
  };

  const handleTranscript = (text) => {
    if (showVoiceScreen) {
      handleSend(text);
    } else {
      setInput(text);
    }
  };

  useEffect(() => {
    const timeout = setTimeout(() => {
      if (messages.length > 0 && endOfMessagesRef.current) {
        endOfMessagesRef.current.scrollIntoView({ behavior: 'smooth' });
      }
    }, 100);
    return () => clearTimeout(timeout);
  }, [messages]);

  const getModelDisplayName = () => {
    switch(model) {
      case 'claude': return 'Omnia';
      case 'sonar': return 'Omnia Search';
      case 'gpt-4o': return 'GPT';
      default: return 'GPT';
    }
  };

  return (
    <div style={{ 
      minHeight: '100vh', 
      display: 'flex', 
      flexDirection: 'column',
      background: streaming ? 'linear-gradient(135deg, #000428, #004e92)' : '#000000',
      color: '#ffffff',
      fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", sans-serif',
      width: '100vw',
      margin: 0,
      padding: 0,
      transition: 'background 0.5s ease'
    }}>
      
      <header style={{ 
        padding: isMobile ? '1rem 1rem 0.5rem' : '1.5rem 2rem 1rem',
        background: streaming ? 'rgba(0, 4, 40, 0.8)' : '#000000',
        position: 'relative',
        borderBottom: '1px solid rgba(255,255,255,0.1)',
        width: '100%',
        transition: 'background 0.5s ease'
      }}>
        
        <div style={{
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center',
          marginBottom: isMobile ? '1.5rem' : '2rem',
          maxWidth: '1200px',
          margin: '0 auto',
          marginBottom: isMobile ? '1.5rem' : '2rem',
          width: '100%'
        }}>
          
          <div style={{ position: 'relative' }}>
            <button
              onClick={() => setShowModelDropdown(!showModelDropdown)}
              disabled={loading || streaming}
              style={{
                background: streaming ? 'rgba(0, 255, 255, 0.2)' : '#2d3748',
                border: streaming ? '1px solid #00ffff' : '1px solid #4a5568',
                borderRadius: '8px',
                padding: '0.5rem 0.75rem',
                fontSize: '0.85rem',
                color: streaming ? '#00ffff' : '#e2e8f0',
                cursor: (loading || streaming) ? 'not-allowed' : 'pointer',
                display: 'flex',
                alignItems: 'center',
                gap: '0.5rem',
                fontWeight: '500',
                opacity: (loading || streaming) ? 0.7 : 1,
                transition: 'all 0.3s ease'
              }}
            >
              {getModelDisplayName()} 
              {streaming && <span style={{ color: '#00ffff' }}>‚óè</span>}
              {!streaming && !loading && ' ‚ñº'}
            </button>
            
            {showModelDropdown && !loading && !streaming && (
              <div style={{
                position: 'absolute',
                top: '100%',
                left: 0,
                marginTop: '4px',
                background: '#2d3748',
                border: '1px solid #4a5568',
                borderRadius: '8px',
                boxShadow: '0 4px 12px rgba(0,0,0,0.3)',
                zIndex: 1000,
                minWidth: '200px'
              }}>
                <button
                  onClick={() => {
                    setModel('gpt-4o');
                    setShowModelDropdown(false);
                  }}
                  style={{
                    display: 'block',
                    width: '100%',
                    padding: '0.75rem 1rem',
                    border: 'none',
                    background: model === 'gpt-4o' ? '#4a5568' : '#2d3748',
                    textAlign: 'left',
                    fontSize: '0.85rem',
                    cursor: 'pointer',
                    fontWeight: model === 'gpt-4o' ? '600' : '400',
                    color: '#e2e8f0'
                  }}
                  onMouseEnter={(e) => e.target.style.background = '#4a5568'}
                  onMouseLeave={(e) => e.target.style.background = model === 'gpt-4o' ? '#4a5568' : '#2d3748'}
                >
                  GPT ‚Ä¢ Konverzace
                </button>
                <button
                  onClick={() => {
                    setModel('claude');
                    setShowModelDropdown(false);
                  }}
                  style={{
                    display: 'block',
                    width: '100%',
                    padding: '0.75rem 1rem',
                    border: 'none',
                    background: model === 'claude' ? '#4a5568' : '#2d3748',
                    textAlign: 'left',
                    fontSize: '0.85rem',
                    cursor: 'pointer',
                    fontWeight: model === 'claude' ? '600' : '400',
                    color: '#e2e8f0'
                  }}
                  onMouseEnter={(e) => e.target.style.background = '#4a5568'}
                  onMouseLeave={(e) => e.target.style.background = model === 'claude' ? '#4a5568' : '#2d3748'}
                >
                  Omnia ‚Ä¢ AI + Streaming üì∫
                </button>
                <button
                  onClick={() => {
                    setModel('sonar');
                    setShowModelDropdown(false);
                  }}
                  style={{
                    display: 'block',
                    width: '100%',
                    padding: '0.75rem 1rem',
                    border: 'none',
                    background: model === 'sonar' ? '#4a5568' : '#2d3748',
                    textAlign: 'left',
                    fontSize: '0.85rem',
                    cursor: 'pointer',
                    fontWeight: model === 'sonar' ? '600' : '400',
                    borderRadius: '0 0 8px 8px',
                    color: '#e2e8f0'
                  }}
                  onMouseEnter={(e) => e.target.style.background = '#4a5568'}
                  onMouseLeave={(e) => e.target.style.background = model === 'sonar' ? '#4a5568' : '#2d3748'}
                >
                  Omnia Search ‚Ä¢ Real-time
                </button>
              </div>
            )}
          </div>

          <div style={{ position: 'relative' }}>
            <button
              onClick={() => setShowSettingsDropdown(!showSettingsDropdown)}
              disabled={loading || streaming}
              style={{
                background: streaming ? 'rgba(0, 255, 255, 0.2)' : '#2d3748',
                border: streaming ? '1px solid #00ffff' : '1px solid #4a5568',
                borderRadius: '8px',
                padding: '0.5rem',
                fontSize: '1rem',
                color: streaming ? '#00ffff' : '#e2e8f0',
                cursor: (loading || streaming) ? 'not-allowed' : 'pointer',
                opacity: (loading || streaming) ? 0.7 : 1,
                transition: 'all 0.3s ease'
              }}
              title="Nastaven√≠ a funkce"
            >
              ‚öôÔ∏è
            </button>
            
            <SettingsDropdown 
              isOpen={showSettingsDropdown && !loading && !streaming}
              onClose={() => setShowSettingsDropdown(false)}
              onNewChat={handleNewChat}
              model={model}
            />
          </div>
        </div>

        <div style={{ 
          textAlign: 'center',
          display: 'flex',
          flexDirection: 'column',
          alignItems: 'center',
          gap: '1rem',
          maxWidth: '1200px',
          margin: '0 auto',
          width: '100%'
        }}>
          <OmniaLogo 
            size={isMobile ? 60 : 80} 
            animate={streaming || loading}
          />
          <h1 style={{ 
            fontSize: isMobile ? '2rem' : '2.5rem',
            fontWeight: '700',
            margin: 0,
            color: streaming ? '#00ffff' : '#ffffff',
            letterSpacing: '0.02em',
            transition: 'color 0.5s ease'
          }}>
            OMNIA
          </h1>
          <div style={{
            fontSize: '0.9rem',
            opacity: 0.7,
            textAlign: 'center',
            color: streaming ? '#00ffff' : 'inherit',
            transition: 'color 0.5s ease'
          }}>
            {streaming ? 'üì∫ streamuje v re√°ln√©m ƒçase' : 'üéµ s ƒçesk√Ωm hlasem ‚Ä¢ üîç real-time vyhled√°v√°n√≠'}
          </div>
        </div>
      </header>

      <main style={{ 
        flex: 1,
        overflowY: 'auto',
        padding: isMobile ? '1rem' : '2rem',
        paddingBottom: '140px',
        background: streaming ? 'rgba(0, 4, 40, 0.3)' : '#000000',
        width: '100%',
        transition: 'background 0.5s ease'
      }}>
        <div style={{ 
          maxWidth: '1000px', 
          margin: '0 auto',
          minHeight: messages.length === 0 ? '60vh' : 'auto',
          display: 'flex',
          flexDirection: 'column',
          justifyContent: messages.length === 0 ? 'center' : 'flex-start',
          width: '100%'
        }}>
          
          {messages.length === 0 && (
            <div style={{ height: '40vh' }}></div>
          )}

          {messages.map((msg, idx) => (
            <div
              key={idx}
              style={{
                display: 'flex',
                justifyContent: msg.sender === 'user' ? 'flex-end' : 'flex-start',
                marginBottom: '1.5rem'
              }}
            >
              <div
                style={{
                  backgroundColor: msg.sender === 'user' ? '#2d3748' : `
                    radial-gradient(circle at 30% 40%, 
                      rgba(0, 255, 255, ${msg.isStreaming ? '0.2' : '0.1'}) 0%,
                      rgba(0, 150, 255, ${msg.isStreaming ? '0.2' : '0.1'}) 30%,
                      rgba(100, 50, 255, ${msg.isStreaming ? '0.2' : '0.1'}) 60%,
                      rgba(153, 50, 204, ${msg.isStreaming ? '0.2' : '0.1'}) 80%,
                      rgba(75, 0, 130, ${msg.isStreaming ? '0.2' : '0.1'}) 100%
                    )
                  `,
                  color: msg.sender === 'user' ? '#ffd700' : '#ffffff',
                  padding: isMobile ? '1rem 1.25rem' : '1.25rem 1.5rem',
                  borderRadius: msg.sender === 'user' ? '20px 20px 4px 20px' : '20px 20px 20px 4px',
                  maxWidth: isMobile ? '85%' : '75%',
                  fontSize: isMobile ? '1rem' : '0.95rem',
                  lineHeight: '1.6',
                  whiteSpace: 'pre-wrap',
                  boxShadow: msg.sender === 'user' 
                    ? '0 2px 8px rgba(255, 215, 0, 0.2)' 
                    : `0 2px 8px rgba(100, 50, 255, ${msg.isStreaming ? '0.5' : '0.3'})`,
                  border: msg.sender === 'user' 
                    ? '1px solid rgba(255, 215, 0, 0.3)' 
                    : `1px solid rgba(100, 50, 255, ${msg.isStreaming ? '0.5' : '0.3'})`,
                  position: 'relative',
                  transition: 'all 0.3s ease'
                }}
              >
                {msg.sender === 'bot' && (
                  <div style={{ 
                    fontSize: '0.75rem',
                    opacity: 0.7, 
                    marginBottom: '0.75rem',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'space-between',
                    paddingBottom: '0.5rem',
                    borderBottom: '1px solid rgba(255,255,255,0.1)'
                  }}>
                    <span style={{ fontWeight: '600', color: '#a0aec0', display: 'flex', alignItems: 'center' }}>
                      <ChatOmniaLogo size={16} />
                      {getModelDisplayName()} 
                      {msg.isStreaming ? ' üì∫' : ' üéµ'}
                    </span>
                    {!msg.isStreaming && (
                      <VoiceButton 
                        text={msg.text} 
                        onAudioStart={() => setIsAudioPlaying(true)}
                        onAudioEnd={() => setIsAudioPlaying(false)}
                      />
                    )}
                  </div>
                )}
                
                {msg.sender === 'bot' ? (
                  <TypewriterText text={msg.text} isStreaming={msg.isStreaming} />
                ) : (
                  msg.text
                )}
              </div>
            </div>
          ))}
          
          {(loading || streaming) && (
            <div style={{ 
              display: 'flex', 
              justifyContent: 'flex-start',
              marginBottom: '1.5rem'
            }}>
              <div style={{
                backgroundColor: `
                  radial-gradient(circle at 30% 40%, 
                    rgba(0, 255, 255, ${streaming ? '0.3' : '0.1'}) 0%,
                    rgba(0, 150, 255, ${streaming ? '0.3' : '0.1'}) 30%,
                    rgba(100, 50, 255, ${streaming ? '0.3' : '0.1'}) 60%,
                    rgba(153, 50, 204, ${streaming ? '0.3' : '0.1'}) 80%,
                    rgba(75, 0, 130, ${streaming ? '0.3' : '0.1'}) 100%
                  )
                `,
                padding: isMobile ? '1rem 1.25rem' : '1.25rem 1.5rem',
                borderRadius: '20px 20px 20px 4px',
                fontSize: isMobile ? '1rem' : '0.95rem',
                boxShadow: `0 2px 8px rgba(100, 50, 255, ${streaming ? '0.5' : '0.3'})`,
                border: `1px solid rgba(100, 50, 255, ${streaming ? '0.5' : '0.3'})`,
                color: '#ffffff',
                transition: 'all 0.3s ease'
              }}>
                <div style={{ display: 'flex', alignItems: 'center', gap: '0.75rem' }}>
                  <div style={{ 
                    width: '16px', 
                    height: '16px', 
                    border: '2px solid rgba(255,255,255,0.3)', 
                    borderTop: streaming ? '2px solid #00ffff' : '2px solid #00ffff',
                    borderRadius: '50%',
                    animation: streaming ? 'spin-fast 0.8s linear infinite' : 'spin 1s linear infinite'
                  }}></div>
                  <span style={{ color: '#a0aec0', fontWeight: '500' }}>
                    {streaming ? `${getModelDisplayName()} streamuje... üì∫` : `${getModelDisplayName()} p≈ôem√Ω≈°l√≠... üéµ`}
                  </span>
                </div>
              </div>
            </div>
          )}
          
          <div ref={endOfMessagesRef} />
        </div>
      </main>

      <div style={{ 
        position: 'fixed', 
        bottom: 0, 
        left: 0,
        right: 0,
        background: streaming ? 'rgba(0, 4, 40, 0.95)' : 'rgba(0, 0, 0, 0.95)', 
        backdropFilter: 'blur(10px)',
        padding: isMobile ? '1rem' : '1.5rem',
        borderTop: streaming ? '1px solid rgba(0, 255, 255, 0.3)' : '1px solid rgba(255,255,255,0.1)',
        paddingBottom: isMobile ? 'calc(env(safe-area-inset-bottom, 1rem) + 1rem)' : '1.5rem',
        width: '100%',
        transition: 'all 0.5s ease'
      }}>
        <div style={{ 
          maxWidth: '1000px',
          margin: '0 auto',
          display: 'flex', 
          gap: '0.75rem',
          alignItems: 'center',
          width: '100%'
        }}>
          
          <div style={{ flex: 1 }}>
            <input
              type="text"
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyDown={(e) => e.key === 'Enter' && !loading && !streaming && handleSend()}
              placeholder={streaming ? `${getModelDisplayName()} streamuje...` : `Napi≈°te zpr√°vu pro ${getModelDisplayName()}... üéµ`}
              disabled={loading || streaming}
              style={{ 
                width: '100%',
                padding: isMobile ? '1rem 1.25rem' : '1rem 1.5rem',
                fontSize: isMobile ? '16px' : '0.95rem',
                borderRadius: '25px',
                border: streaming ? '2px solid #00ffff' : '2px solid #4a5568',
                outline: 'none',
                backgroundColor: (loading || streaming) ? '#2d3748' : '#1a202c',
                color: streaming ? '#00ffff' : '#ffffff',
                transition: 'all 0.3s ease',
                boxShadow: streaming ? '0 0 10px rgba(0, 255, 255, 0.3)' : '0 2px 8px rgba(0,0,0,0.3)',
                opacity: (loading || streaming) ? 0.7 : 1
              }}
              onFocus={(e) => {
                if (!streaming && !loading) {
                  e.target.style.borderColor = '#00ffff';
                  e.target.style.boxShadow = '0 0 0 3px rgba(0, 255, 255, 0.1)';
                }
              }}
              onBlur={(e) => {
                if (!streaming) {
                  e.target.style.borderColor = '#4a5568';
                  e.target.style.boxShadow = '0 2px 8px rgba(0,0,0,0.3)';
                }
              }}
            />
          </div>
          
          <MiniOmniaLogo 
            size={isMobile ? 50 : 56} 
            onClick={() => !loading && !streaming && setShowVoiceScreen(true)}
            isAudioPlaying={isAudioPlaying}
            loading={loading}
            streaming={streaming}
          />

          <OmniaArrowButton
            onClick={() => handleSend()}
            disabled={loading || streaming || !input.trim()}
            loading={loading || streaming}
            size={isMobile ? 50 : 56}
          />
        </div>
      </div>

      {showVoiceScreen && (
        <VoiceScreen
          onClose={() => setShowVoiceScreen(false)}
          onTranscript={handleTranscript}
          loading={loading}
          isAudioPlaying={isAudioPlaying}
          isMobile={isMobile}
          stopCurrentAudio={stopCurrentAudio}
          model={model}
          streaming={streaming}
        />
      )}

      <style>{`
        @keyframes shimmer {
          0% { transform: translateX(-100%) translateY(-100%) rotate(45deg); }
          100% { transform: translateX(200%) translateY(200%) rotate(45deg); }
        }
        
        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }
        
        @keyframes spin-fast {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }
        
        @keyframes blink {
          0%, 50% { opacity: 1; }
          51%, 100% { opacity: 0; }
        }
        
        @keyframes pulse-omnia {
          0%, 100% { 
            box-shadow: 0 0 15px rgba(100, 50, 255, 0.8);
            transform: scale(1);
          }
          50% { 
            box-shadow: 0 0 25px rgba(0, 255, 255, 0.9);
            transform: scale(1.05);
          }
        }
        
        @keyframes pulse-streaming {
          0%, 100% { 
            box-shadow: 0 0 20px rgba(0, 255, 255, 1);
            transform: scale(1);
          }
          50% { 
            box-shadow: 0 0 35px rgba(0, 255, 255, 1);
            transform: scale(1.08);
          }
        }
        
        @keyframes pulse-audio {
          0%, 100% { 
            box-shadow: 0 0 15px rgba(0, 255, 255, 0.9);
            transform: scale(1);
          }
          50% { 
            box-shadow: 0 0 25px rgba(0, 255, 255, 1);
            transform: scale(1.05);
          }
        }
        
        @keyframes pulse-processing {
          0%, 100% { 
            box-shadow: 0 0 20px rgba(255, 193, 7, 0.5);
            transform: scale(1);
          }
          50% { 
            box-shadow: 0 0 30px rgba(255, 193, 7, 0.8);
            transform: scale(1.03);
          }
        }
        
        @keyframes pulse-recording {
          0%, 100% { 
            box-shadow: 0 0 30px rgba(220, 53, 69, 0.6);
            transform: scale(1.1);
          }
          50% { 
            box-shadow: 0 0 40px rgba(220, 53, 69, 0.9);
            transform: scale(1.12);
          }
        }
        
        @keyframes pulse-notification {
          0%, 100% { 
            transform: scale(1);
            box-shadow: 0 6px 20px rgba(0,255,255,0.3);
          }
          50% { 
            transform: scale(1.02);
            box-shadow: 0 8px 25px rgba(0,255,255,0.5);
          }
        }
        
        .omnia-logo.animate {
          animation: omnia-breathe 4s ease-in-out infinite;
        }
        
        @keyframes omnia-breathe {
          0%, 100% { 
            transform: scale(1);
            filter: brightness(1);
          }
          50% { 
            transform: scale(1.02);
            filter: brightness(1.1);
          }
        }

        html, body {
          margin: 0;
          padding: 0;
          width: 100%;
          overflow-x: hidden;
          background: #000000;
        }

        @media (max-width: 768px) {
          input {
            font-size: 16px !important;
          }
        }

        ::-webkit-scrollbar {
          width: 8px;
        }
        
        ::-webkit-scrollbar-track {
          background: #1a202c;
        }
        
        ::-webkit-scrollbar-thumb {
          background: #4a5568;
          border-radius: 4px;
        }
        
        ::-webkit-scrollbar-thumb:hover {
          background: #718096;
        }

        button {
          -webkit-user-select: none;
          -moz-user-select: none;
          -ms-user-select: none;
          user-select: none;
        }

        * {
          -webkit-tap-highlight-color: transparent;
          box-sizing: border-box;
        }

        #root {
          width: 100vw;
          min-height: 100vh;
          margin: 0;
          padding: 0;
          background: #000000;
        }

        input:focus {
          outline: none !important;
        }

        button, input, div[role="button"] {
          transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
        }

        @media (max-width: 768px) {
          button {
            min-height: 44px;
            min-width: 44px;
          }
        }
      `}</style>

      {(showModelDropdown || showSettingsDropdown) && !loading && !streaming && (
        <div
          style={{
            position: 'fixed',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            zIndex: 999
          }}
          onClick={() => {
            setShowModelDropdown(false);
            setShowSettingsDropdown(false);
          }}
        />
      )}
    </div>
  );
}

export default App;