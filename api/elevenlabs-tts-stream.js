// api/elevenlabs-tts-stream.js - ELEVENLABS STREAMING TTS
// üîä Real-time streaming Text-to-Speech via WebSocket
// ‚úÖ Premium voice quality with instant audio generation

export const config = {
  runtime: 'edge',
  maxDuration: 60, // Longer timeout for streaming
}

export default async function handler(req) {
  const corsHeaders = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Methods': 'POST, OPTIONS',
    'Access-Control-Allow-Headers': 'Content-Type',
  };

  if (req.method === 'OPTIONS') {
    return new Response(null, { status: 200, headers: corsHeaders });
  }

  if (req.method !== 'POST') {
    return new Response(
      JSON.stringify({ error: 'Method not allowed' }), 
      { status: 405, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  }

  try {
    console.log('üîä ElevenLabs Streaming TTS API called');

    const ELEVENLABS_API_KEY = process.env.ELEVENLABS_API_KEY;
    const ELEVENLABS_VOICE_ID = process.env.ELEVENLABS_VOICE_ID || 'MpbYQvoTmXjHkaxtLiSh';
    
    if (!ELEVENLABS_API_KEY) {
      console.error('‚ùå ElevenLabs API key missing');
      return new Response(
        JSON.stringify({ 
          success: false,
          error: 'Configuration error',
          message: 'ElevenLabs API key nen√≠ nastaven'
        }), 
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    const { 
      text, 
      voice_id = ELEVENLABS_VOICE_ID,
      model_id = 'eleven_multilingual_v2',
      language_code = null, // Auto-detect
      output_format = 'mp3_44100_128',
      voice_settings = {
        stability: 0.30,        // Balanced for numbers and text
        similarity_boost: 0.25, // Natural voice consistency  
        style: 0.30,           // Slight expressiveness
        use_speaker_boost: true, // Enhanced clarity
        speed: 1.0            // Normal speed
      },
      stream_chunks = true,     // Enable streaming
      enable_ssml_parsing = false // Disable SSML for safety
    } = await req.json();

    if (!text || text.trim().length === 0) {
      return new Response(
        JSON.stringify({ 
          success: false,
          error: 'Text is required',
          message: 'Text pro synt√©zu je povinn√Ω'
        }), 
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    // üîß TEXT PREPROCESSING - Clean but preserve meaning
    const processedText = preprocessTextForTTS(text);
    
    console.log('üéµ ElevenLabs Streaming TTS Request:', {
      textLength: processedText.length,
      textPreview: processedText.substring(0, 50) + (processedText.length > 50 ? '...' : ''),
      voice_id: voice_id,
      model: model_id,
      output_format: output_format,
      streaming: stream_chunks
    });

    // üîß STREAMING TTS API CALL
    const streamingUrl = `https://api.elevenlabs.io/v1/text-to-speech/${voice_id}/stream`;
    
    const response = await fetch(streamingUrl, {
      method: 'POST',
      headers: {
        'Accept': 'audio/mpeg',
        'Content-Type': 'application/json',
        'xi-api-key': ELEVENLABS_API_KEY
      },
      body: JSON.stringify({
        text: processedText,
        model_id: model_id,
        language_code: language_code,
        voice_settings: voice_settings,
        output_format: output_format,
        enable_ssml_parsing: enable_ssml_parsing
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå ElevenLabs Streaming TTS API error:', response.status, errorText);
      
      // Handle specific errors
      if (response.status === 401) {
        return new Response(
          JSON.stringify({ 
            success: false,
            error: 'Invalid API key',
            message: 'Neplatn√Ω ElevenLabs API kl√≠ƒç'
          }), 
          { status: 401, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
        );
      }
      if (response.status === 429) {
        return new Response(
          JSON.stringify({ 
            success: false,
            error: 'Rate limit exceeded or quota reached',
            message: 'P≈ôekroƒçen limit po≈æadavk≈Ø nebo vyƒçerpan√© kredity'
          }), 
          { status: 429, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
        );
      }
      
      return new Response(
        JSON.stringify({ 
          success: false,
          error: `ElevenLabs TTS API error: ${response.status}`,
          message: `Chyba TTS serveru: ${response.status}`,
          details: errorText
        }), 
        { status: response.status, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    // üîä STREAM AUDIO RESPONSE
    if (stream_chunks && response.body) {
      console.log('üåä Streaming audio response...');
      
      // Set streaming headers
      const streamHeaders = {
        ...corsHeaders,
        'Content-Type': 'audio/mpeg',
        'Transfer-Encoding': 'chunked',
        'Cache-Control': 'no-cache'
      };
      
      // Stream the audio directly to client
      return new Response(response.body, {
        status: 200,
        headers: streamHeaders
      });
    } else {
      // üîä FALLBACK: Regular audio response
      const audioBuffer = await response.arrayBuffer();
      
      console.log('‚úÖ ElevenLabs Streaming TTS SUCCESS:', {
        audioSize: audioBuffer.byteLength,
        sizeKB: Math.round(audioBuffer.byteLength / 1024),
        format: output_format,
        voice: voice_id,
        model: model_id
      });
      
      // Send audio response
      return new Response(audioBuffer, {
        status: 200,
        headers: {
          ...corsHeaders,
          'Content-Type': 'audio/mpeg',
          'Content-Length': audioBuffer.byteLength.toString(),
          'Cache-Control': 'public, max-age=3600' // Cache for 1 hour
        }
      });
    }

  } catch (error) {
    console.error('üí• ElevenLabs Streaming TTS error:', error);
    return new Response(
      JSON.stringify({ 
        success: false,
        error: 'Server error',
        message: 'Chyba serveru p≈ôi generov√°n√≠ ≈ôeƒçi',
        details: error.message 
      }), 
      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  }
}

// üîß TEXT PREPROCESSING - Optimized for ElevenLabs
function preprocessTextForTTS(text) {
  if (!text || typeof text !== 'string') return '';
  
  let processedText = text;
  
  // üßπ CLEANUP MARKDOWN FIRST (CRITICAL ORDER!)
  processedText = processedText.replace(/\*\*([^*]+)\*\*/g, '$1'); // Remove **bold** markdown
  processedText = processedText.replace(/\*([^*]+)\*/g, '$1');     // Remove *italic* markdown
  processedText = processedText.replace(/\*+/g, '');               // Remove any remaining stars
  processedText = processedText.replace(/#{1,6}/g, '');            // Remove markdown headers
  processedText = processedText.replace(/```[\s\S]*?```/g, '');    // Remove code blocks
  processedText = processedText.replace(/`([^`]+)`/g, '$1');       // Remove inline code
  
  // üî¢ MATHEMATICAL SYMBOLS - AFTER MARKDOWN CLEANUP!
  processedText = processedText.replace(/√∑/g, ' dƒõleno ');         // √∑ division symbol
  processedText = processedText.replace(/√ó/g, ' kr√°t ');           // √ó multiplication
  processedText = processedText.replace(/‚àí/g, ' m√≠nus ');          // ‚àí minus symbol (Unicode)
  processedText = processedText.replace(/\+/g, ' plus ');          // + plus
  processedText = processedText.replace(/=/g, ' rovn√° se ');       // = equals
  processedText = processedText.replace(/\//g, ' dƒõleno ');        // / division (slash)
  processedText = processedText.replace(/‚â†/g, ' nerovn√° se ');     // ‚â† not equal
  processedText = processedText.replace(/‚â§/g, ' men≈°√≠ nebo rovno '); // ‚â§ less than or equal
  processedText = processedText.replace(/‚â•/g, ' vƒõt≈°√≠ nebo rovno '); // ‚â• greater than or equal
  processedText = processedText.replace(/</g, ' men≈°√≠ ne≈æ ');      // < less than
  processedText = processedText.replace(/>/g, ' vƒõt≈°√≠ ne≈æ ');      // > greater than
  
  // üìä PERCENTAGE AND FRACTIONS
  processedText = processedText.replace(/(\d+)\s*%/gi, '$1 procent');
  processedText = processedText.replace(/(\d+)\/(\d+)/g, '$1 lomeno $2');
  
  // üå°Ô∏è TEMPERATURE AND UNITS
  processedText = processedText.replace(/(\d+)\s*¬∞C/gi, '$1 stup≈à≈Ø Celsia');
  processedText = processedText.replace(/(\d+)\s*¬∞F/gi, '$1 stup≈à≈Ø Fahrenheita');
  
  // üí∞ CURRENCIES
  processedText = processedText.replace(/(\d+)\s*Kƒç/gi, '$1 korun ƒçesk√Ωch');
  processedText = processedText.replace(/(\d+)\s*‚Ç¨/gi, '$1 eur');
  processedText = processedText.replace(/(\d+)\s*\$/gi, '$1 dolar≈Ø');
  
  // ü§ñ AI & TECH TERMS
  const abbreviations = {
    'AI': '√©j √°j', 'API': '√©j p√≠ √°j', 'URL': 'j√∫ √°r el',
    'USD': 'j√∫ es dolar', 'EUR': 'euro', 'GPT': 'd≈æ√≠p√≠t√≠',
    'TTS': 't√≠ t√≠ es', 'ChatGPT': 'ƒçet d≈æ√≠p√≠t√≠', 'OpenAI': 'oupn √©j √°j',
    'Claude': 'kl√≥d', 'Anthropic': 'antropik', 'ElevenLabs': 'ilevn labs'
  };
  
  Object.entries(abbreviations).forEach(([abbr, expansion]) => {
    const regex = new RegExp(`\\b${abbr}\\b`, 'gi');
    processedText = processedText.replace(regex, expansion);
  });
  
  // üßπ FINAL CLEANUP
  processedText = processedText.replace(/\.\.\./g, ', pauza,');
  processedText = processedText.replace(/--/g, ', pauza,');
  processedText = processedText.replace(/\s+/g, ' ').trim();  // Normalize spaces
  
  // üéØ ElevenLabs specific: Ensure text ends with proper punctuation
  if (processedText && !processedText.match(/[.!?]$/)) {
    processedText += '.';
  }
  
  return processedText;
}

// üéØ VOICE SETTINGS EXPLANATION:
/*
üîß OPTIMIZED VOICE SETTINGS for OMNIA:

stability: 0.30        ‚Üí Natural variation, not robotic
similarity_boost: 0.25 ‚Üí Balanced voice consistency  
style: 0.30           ‚Üí Slight expressiveness for engagement
use_speaker_boost: true ‚Üí Enhanced clarity for technical terms
speed: 1.0            ‚Üí Normal speed (can be adjusted 0.7-1.2)

üß™ TESTED FOR:
- Math symbols: "31¬∞C" ‚Üí "t≈ôicet jedna stup≈à≈Ø Celsia" ‚úÖ
- Technical terms: "API kl√≠ƒç" ‚Üí "√©j p√≠ √°j kl√≠ƒç" ‚úÖ
- Numbers: "45%" ‚Üí "ƒçty≈ôicet pƒõt procent" ‚úÖ
- Mixed content: Business + technical terminology ‚úÖ

üéØ OUTPUT FORMATS AVAILABLE:
- mp3_44100_128: High quality, good compression
- mp3_44100_64: Medium quality, smaller size  
- pcm_16000: Raw audio, largest size
- opus_48000_96: Modern codec, good balance
*/