// api/voice.js - JEMNƒöJ≈†√ç CZECH PREPROCESSING
export const config = {
  runtime: 'edge',
}

// üéØ JEMNƒöJ≈†√ç CZECH PREPROCESSING - M√©nƒõ agresivn√≠
function preprocessCzechTextForTTS(text) {
  if (!text || typeof text !== 'string') return '';
  
  let processedText = text;
  
  // ‚úÖ POUZE Z√ÅKLADN√ç ƒå√çSLA (m√©nƒõ zmƒõn = m√©nƒõ artefakt≈Ø)
  const basicNumbers = {
    ' 0 ': ' nula ',
    ' 1 ': ' jedna ',
    ' 2 ': ' dva ',
    ' 3 ': ' t≈ôi ',
    ' 4 ': ' ƒçty≈ôi ',
    ' 5 ': ' pƒõt ',
    ' 6 ': ' ≈°est ',
    ' 7 ': ' sedm ',
    ' 8 ': ' osm ',
    ' 9 ': ' devƒõt ',
    ' 10 ': ' deset '
  };
  
  // Nahradit jen pokud jsou ƒç√≠sla oddƒõlen√° mezerami
  Object.entries(basicNumbers).forEach(([num, word]) => {
    processedText = processedText.replace(new RegExp(num, 'g'), word);
  });
  
  // ‚úÖ JEN Z√ÅKLADN√ç ZKRATKY (ne v≈°echny)
  const essentialAbbreviations = {
    'AI': 'ajaj',
    'API': '√° p√© jaj',
    'nap≈ô': 'nap≈ô√≠klad'
  };
  
  Object.entries(essentialAbbreviations).forEach(([abbr, expansion]) => {
    const regex = new RegExp(`\\b${abbr}\\b`, 'gi');
    processedText = processedText.replace(regex, expansion);
  });
  
  // ‚úÖ JEMN√â √öPRAVY (bez radik√°ln√≠ch zmƒõn)
  processedText = processedText.replace(/(\d+)\s*%/gi, '$1 procent');
  processedText = processedText.replace(/(\d+)\s*Kƒç/gi, '$1 korun');
  
  // ‚úÖ MINIM√ÅLN√ç CLEANUP
  processedText = processedText.replace(/\s+/g, ' ').trim();
  
  return processedText;
}

export default async function handler(req) {
  const corsHeaders = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Methods': 'POST, OPTIONS',
    'Access-Control-Allow-Headers': 'Content-Type',
  };

  if (req.method === 'OPTIONS') {
    return new Response(null, { status: 200, headers: corsHeaders });
  }

  if (req.method !== 'POST') {
    return new Response(JSON.stringify({ error: 'Method not allowed' }), { 
      status: 405, headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
    });
  }

  try {
    const ELEVENLABS_API_KEY = process.env.ELEVENLABS_API_KEY;
    
    if (!ELEVENLABS_API_KEY) {
      return new Response(JSON.stringify({ 
        error: 'ElevenLabs API key missing' 
      }), { 
        status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      });
    }

    const requestData = await req.json();
    const { text } = requestData;
    
    if (!text?.trim()) {
      return new Response(JSON.stringify({ 
        error: 'No text provided' 
      }), { 
        status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      });
    }

    // üéØ JEMN√ù PREPROCESSING
    const processedText = preprocessCzechTextForTTS(text);
    
    console.log('üéµ Gentle Czech preprocessing:', {
      original: text.substring(0, 80),
      processed: processedText.substring(0, 80),
      changed: text !== processedText
    });

    const response = await fetch(`https://api.elevenlabs.io/v1/text-to-speech/MpbYQvoTmXjHkaxtLiSh`, {
      method: 'POST',
      headers: {
        'Accept': 'audio/mpeg',
        'Content-Type': 'application/json',
        'xi-api-key': ELEVENLABS_API_KEY
      },
      body: JSON.stringify({
        text: processedText,
        model_id: 'eleven_multilingual_v2',
        voice_settings: {
          stability: 0.9,         // üéØ VY≈†≈†√ç stabilita = m√©nƒõ artefakt≈Ø
          similarity_boost: 0.8,  // üéØ M√≠rnƒõj≈°√≠ boost
          style: 0.1,            // üéØ NI≈Ω≈†√ç styl = p≈ô√≠rodzenƒõj≈°√≠
          use_speaker_boost: true
        }
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå ElevenLabs failed:', response.status, errorText);
      throw new Error(`ElevenLabs failed: ${response.status}`);
    }

    const audioBlob = await response.blob();
    console.log('‚úÖ Gentle TTS success!');
    
    return new Response(audioBlob, {
      status: 200,
      headers: {
        ...corsHeaders,
        'Content-Type': 'audio/mpeg'
      }
    });

  } catch (error) {
    console.error('üí• Voice API error:', error);
    return new Response(JSON.stringify({ 
      error: 'Voice generation failed',
      details: error.message 
    }), { 
      status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
    });
  }
}